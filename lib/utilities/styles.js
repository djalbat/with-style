"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _style = _interopRequireDefault(require("../style"));

var _lexer = _interopRequireDefault(require("../css/lexer"));

var _parser = _interopRequireDefault(require("../css/parser"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var cssLexer = _lexer["default"].fromNothing(),
    cssParser = _parser["default"].fromNothing();

var styleMap = {};

function renderStyle(style) {
  var headDOMElement = document.querySelector("head"),
      styleDOMElement = document.createElement("style"),
      innerHTML = "\n        \n".concat(style);
  Object.assign(styleDOMElement, {
    innerHTML: innerHTML
  });
  headDOMElement.appendChild(styleDOMElement);
}

function renderStyles() {
  var stylesCSS = retrieveStylesCSS(),
      style = stylesCSS; ///

  renderStyle(style);
}

function generateStyle(args, className) {
  var superStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  var strings = args.shift(),
      ///
  content = strings.reduce(function (content, string, index) {
    var arg = args[index];
    content = arg !== undefined ? "".concat(content).concat(string).concat(arg) : "".concat(content).concat(string);
    return content;
  }, ""),
      tokens = cssLexer.tokenise(content),
      node = cssParser.parse(tokens),
      style = _style["default"].fromNodeAndTokens(node, tokens);

  if (superStyle !== null) {
    style["extends"](superStyle);
  }

  styleMap[className] = style;
}

function retrieveStyle(className) {
  var style = styleMap[className] || null;
  return style;
}

var _default = {
  renderStyle: renderStyle,
  renderStyles: renderStyles,
  generateStyle: generateStyle,
  retrieveStyle: retrieveStyle
};
exports["default"] = _default;

function retrieveStylesCSS() {
  var classNames = Object.keys(styleMap),
      stylesCSS = classNames.reduce(function (stylesCSS, className) {
    var style = retrieveStyle(className),
        styleCSS = style.asCSS(className);
    stylesCSS += styleCSS;
    return stylesCSS;
  }, "");
  return stylesCSS;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlcy5qcyJdLCJuYW1lcyI6WyJjc3NMZXhlciIsIkNTU0xleGVyIiwiZnJvbU5vdGhpbmciLCJjc3NQYXJzZXIiLCJDU1NQYXJzZXIiLCJzdHlsZU1hcCIsInJlbmRlclN0eWxlIiwic3R5bGUiLCJoZWFkRE9NRWxlbWVudCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInN0eWxlRE9NRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJPYmplY3QiLCJhc3NpZ24iLCJhcHBlbmRDaGlsZCIsInJlbmRlclN0eWxlcyIsInN0eWxlc0NTUyIsInJldHJpZXZlU3R5bGVzQ1NTIiwiZ2VuZXJhdGVTdHlsZSIsImFyZ3MiLCJjbGFzc05hbWUiLCJzdXBlclN0eWxlIiwic3RyaW5ncyIsInNoaWZ0IiwiY29udGVudCIsInJlZHVjZSIsInN0cmluZyIsImluZGV4IiwiYXJnIiwidW5kZWZpbmVkIiwidG9rZW5zIiwidG9rZW5pc2UiLCJub2RlIiwicGFyc2UiLCJTdHlsZSIsImZyb21Ob2RlQW5kVG9rZW5zIiwicmV0cmlldmVTdHlsZSIsImNsYXNzTmFtZXMiLCJrZXlzIiwic3R5bGVDU1MiLCJhc0NTUyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7OztBQUVBLElBQU1BLFFBQVEsR0FBR0Msa0JBQVNDLFdBQVQsRUFBakI7QUFBQSxJQUNNQyxTQUFTLEdBQUdDLG1CQUFVRixXQUFWLEVBRGxCOztBQUdBLElBQU1HLFFBQVEsR0FBRyxFQUFqQjs7QUFFQSxTQUFTQyxXQUFULENBQXFCQyxLQUFyQixFQUE0QjtBQUMxQixNQUFNQyxjQUFjLEdBQUdDLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixNQUF2QixDQUF2QjtBQUFBLE1BQ01DLGVBQWUsR0FBR0YsUUFBUSxDQUFDRyxhQUFULENBQXVCLE9BQXZCLENBRHhCO0FBQUEsTUFFTUMsU0FBUyx5QkFFZk4sS0FGZSxDQUZmO0FBTUFPLEVBQUFBLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjSixlQUFkLEVBQStCO0FBQzdCRSxJQUFBQSxTQUFTLEVBQVRBO0FBRDZCLEdBQS9CO0FBSUFMLEVBQUFBLGNBQWMsQ0FBQ1EsV0FBZixDQUEyQkwsZUFBM0I7QUFDRDs7QUFFRCxTQUFTTSxZQUFULEdBQXdCO0FBQ3RCLE1BQU1DLFNBQVMsR0FBR0MsaUJBQWlCLEVBQW5DO0FBQUEsTUFDTVosS0FBSyxHQUFHVyxTQURkLENBRHNCLENBRUk7O0FBRTFCWixFQUFBQSxXQUFXLENBQUNDLEtBQUQsQ0FBWDtBQUNEOztBQUVELFNBQVNhLGFBQVQsQ0FBdUJDLElBQXZCLEVBQTZCQyxTQUE3QixFQUEyRDtBQUFBLE1BQW5CQyxVQUFtQix1RUFBTixJQUFNOztBQUN6RCxNQUFNQyxPQUFPLEdBQUdILElBQUksQ0FBQ0ksS0FBTCxFQUFoQjtBQUFBLE1BQThCO0FBQ3hCQyxFQUFBQSxPQUFPLEdBQUdGLE9BQU8sQ0FBQ0csTUFBUixDQUFlLFVBQUNELE9BQUQsRUFBVUUsTUFBVixFQUFrQkMsS0FBbEIsRUFBNEI7QUFDbkQsUUFBTUMsR0FBRyxHQUFHVCxJQUFJLENBQUNRLEtBQUQsQ0FBaEI7QUFFQUgsSUFBQUEsT0FBTyxHQUFJSSxHQUFHLEtBQUtDLFNBQVQsYUFDS0wsT0FETCxTQUNlRSxNQURmLFNBQ3dCRSxHQUR4QixjQUVPSixPQUZQLFNBRWlCRSxNQUZqQixDQUFWO0FBSUEsV0FBT0YsT0FBUDtBQUNELEdBUlMsRUFRUCxFQVJPLENBRGhCO0FBQUEsTUFVTU0sTUFBTSxHQUFHaEMsUUFBUSxDQUFDaUMsUUFBVCxDQUFrQlAsT0FBbEIsQ0FWZjtBQUFBLE1BV01RLElBQUksR0FBRy9CLFNBQVMsQ0FBQ2dDLEtBQVYsQ0FBZ0JILE1BQWhCLENBWGI7QUFBQSxNQVlNekIsS0FBSyxHQUFHNkIsa0JBQU1DLGlCQUFOLENBQXdCSCxJQUF4QixFQUE4QkYsTUFBOUIsQ0FaZDs7QUFjTSxNQUFJVCxVQUFVLEtBQUssSUFBbkIsRUFBeUI7QUFDdkJoQixJQUFBQSxLQUFLLFdBQUwsQ0FBY2dCLFVBQWQ7QUFDRDs7QUFFRGxCLEVBQUFBLFFBQVEsQ0FBQ2lCLFNBQUQsQ0FBUixHQUFzQmYsS0FBdEI7QUFDUDs7QUFFRCxTQUFTK0IsYUFBVCxDQUF1QmhCLFNBQXZCLEVBQWtDO0FBQ2hDLE1BQU1mLEtBQUssR0FBR0YsUUFBUSxDQUFDaUIsU0FBRCxDQUFSLElBQXVCLElBQXJDO0FBRUEsU0FBT2YsS0FBUDtBQUNEOztlQUVjO0FBQ2JELEVBQUFBLFdBQVcsRUFBWEEsV0FEYTtBQUViVyxFQUFBQSxZQUFZLEVBQVpBLFlBRmE7QUFHYkcsRUFBQUEsYUFBYSxFQUFiQSxhQUhhO0FBSWJrQixFQUFBQSxhQUFhLEVBQWJBO0FBSmEsQzs7O0FBT2YsU0FBU25CLGlCQUFULEdBQTZCO0FBQzNCLE1BQU1vQixVQUFVLEdBQUd6QixNQUFNLENBQUMwQixJQUFQLENBQVluQyxRQUFaLENBQW5CO0FBQUEsTUFDTWEsU0FBUyxHQUFHcUIsVUFBVSxDQUFDWixNQUFYLENBQWtCLFVBQUNULFNBQUQsRUFBWUksU0FBWixFQUEwQjtBQUN0RCxRQUFNZixLQUFLLEdBQUcrQixhQUFhLENBQUNoQixTQUFELENBQTNCO0FBQUEsUUFDTW1CLFFBQVEsR0FBR2xDLEtBQUssQ0FBQ21DLEtBQU4sQ0FBWXBCLFNBQVosQ0FEakI7QUFHQUosSUFBQUEsU0FBUyxJQUFJdUIsUUFBYjtBQUVBLFdBQU92QixTQUFQO0FBQ0QsR0FQVyxFQU9ULEVBUFMsQ0FEbEI7QUFVQSxTQUFPQSxTQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IFN0eWxlIGZyb20gXCIuLi9zdHlsZVwiO1xuaW1wb3J0IENTU0xleGVyIGZyb20gXCIuLi9jc3MvbGV4ZXJcIjtcbmltcG9ydCBDU1NQYXJzZXIgZnJvbSBcIi4uL2Nzcy9wYXJzZXJcIjtcblxuY29uc3QgY3NzTGV4ZXIgPSBDU1NMZXhlci5mcm9tTm90aGluZygpLFxuICAgICAgY3NzUGFyc2VyID0gQ1NTUGFyc2VyLmZyb21Ob3RoaW5nKCk7XG5cbmNvbnN0IHN0eWxlTWFwID0ge307XG5cbmZ1bmN0aW9uIHJlbmRlclN0eWxlKHN0eWxlKSB7XG4gIGNvbnN0IGhlYWRET01FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImhlYWRcIiksXG4gICAgICAgIHN0eWxlRE9NRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSxcbiAgICAgICAgaW5uZXJIVE1MID0gYFxuICAgICAgICBcbiR7c3R5bGV9YDtcblxuICBPYmplY3QuYXNzaWduKHN0eWxlRE9NRWxlbWVudCwge1xuICAgIGlubmVySFRNTFxuICB9KTtcblxuICBoZWFkRE9NRWxlbWVudC5hcHBlbmRDaGlsZChzdHlsZURPTUVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiByZW5kZXJTdHlsZXMoKSB7XG4gIGNvbnN0IHN0eWxlc0NTUyA9IHJldHJpZXZlU3R5bGVzQ1NTKCksXG4gICAgICAgIHN0eWxlID0gc3R5bGVzQ1NTOyAgLy8vXG5cbiAgcmVuZGVyU3R5bGUoc3R5bGUpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVN0eWxlKGFyZ3MsIGNsYXNzTmFtZSwgc3VwZXJTdHlsZSA9IG51bGwpIHtcbiAgY29uc3Qgc3RyaW5ncyA9IGFyZ3Muc2hpZnQoKSxcdC8vL1xuICAgICAgICBjb250ZW50ID0gc3RyaW5ncy5yZWR1Y2UoKGNvbnRlbnQsIHN0cmluZywgaW5kZXgpID0+IHtcbiAgICAgICAgICBjb25zdCBhcmcgPSBhcmdzW2luZGV4XTtcblxuICAgICAgICAgIGNvbnRlbnQgPSAoYXJnICE9PSB1bmRlZmluZWQpID9cbiAgICAgICAgICAgICAgICAgICAgICBgJHtjb250ZW50fSR7c3RyaW5nfSR7YXJnfWAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgYCR7Y29udGVudH0ke3N0cmluZ31gO1xuXG4gICAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICAgIH0sIFwiXCIpLFxuICAgICAgICB0b2tlbnMgPSBjc3NMZXhlci50b2tlbmlzZShjb250ZW50KSxcbiAgICAgICAgbm9kZSA9IGNzc1BhcnNlci5wYXJzZSh0b2tlbnMpLFxuICAgICAgICBzdHlsZSA9IFN0eWxlLmZyb21Ob2RlQW5kVG9rZW5zKG5vZGUsIHRva2Vucyk7XG5cbiAgICAgICAgaWYgKHN1cGVyU3R5bGUgIT09IG51bGwpIHtcbiAgICAgICAgICBzdHlsZS5leHRlbmRzKHN1cGVyU3R5bGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3R5bGVNYXBbY2xhc3NOYW1lXSA9IHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZXRyaWV2ZVN0eWxlKGNsYXNzTmFtZSkge1xuICBjb25zdCBzdHlsZSA9IHN0eWxlTWFwW2NsYXNzTmFtZV0gfHwgbnVsbDtcblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcmVuZGVyU3R5bGUsXG4gIHJlbmRlclN0eWxlcyxcbiAgZ2VuZXJhdGVTdHlsZSxcbiAgcmV0cmlldmVTdHlsZVxufTtcblxuZnVuY3Rpb24gcmV0cmlldmVTdHlsZXNDU1MoKSB7XG4gIGNvbnN0IGNsYXNzTmFtZXMgPSBPYmplY3Qua2V5cyhzdHlsZU1hcCksXG4gICAgICAgIHN0eWxlc0NTUyA9IGNsYXNzTmFtZXMucmVkdWNlKChzdHlsZXNDU1MsIGNsYXNzTmFtZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHN0eWxlID0gcmV0cmlldmVTdHlsZShjbGFzc05hbWUpLFxuICAgICAgICAgICAgICAgIHN0eWxlQ1NTID0gc3R5bGUuYXNDU1MoY2xhc3NOYW1lKTtcblxuICAgICAgICAgIHN0eWxlc0NTUyArPSBzdHlsZUNTUztcblxuICAgICAgICAgIHJldHVybiBzdHlsZXNDU1M7XG4gICAgICAgIH0sIFwiXCIpO1xuXG4gIHJldHVybiBzdHlsZXNDU1M7XG59XG4iXX0=