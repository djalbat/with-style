'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var lexers = require('occam-lexers'),
    ///
parsers = require('occam-parsers'); ///

var Style = require('../style');

var CSSLexer = lexers.CSSLexer,
    CSSParser = parsers.CSSParser;


var cssLexer = CSSLexer.fromNothing(),
    cssParser = CSSParser.fromNothing();

var styleMap = {};

function renderStyles() {
  var stylesCSS = retrieveStylesCSS(),
      innerHTML = '\n        \n' + stylesCSS,
      headDOMElement = document.querySelector('head'),
      styleDOMElement = document.createElement('style');

  Object.assign(styleDOMElement, {
    innerHTML: innerHTML
  });

  headDOMElement.appendChild(styleDOMElement);
}

function generateStyle(args, className) {
  var superStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  var strings = args.shift(),
      ///
  content = strings.reduce(function (content, cssString, index) {
    var arg = args[index];

    content += cssString;

    switch (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) {
      case 'string':
        content += arg;
        break;

      case 'function':
        content += arg();
        break;
    }

    return content;
  }, ''),
      tokens = cssLexer.tokenise(content),
      node = cssParser.parse(tokens),
      style = Style.fromNodeAndTokens(node, tokens);

  if (superStyle !== null) {
    style.extends(superStyle);
  }

  styleMap[className] = style;
}

function retrieveStyle(className) {
  var style = styleMap[className];

  return style;
}

module.exports = {
  renderStyles: renderStyles,
  generateStyle: generateStyle,
  retrieveStyle: retrieveStyle
};

function retrieveStylesCSS() {
  var classNames = Object.keys(styleMap),
      stylesCSS = classNames.reduce(function (stylesCSS, className) {
    var style = retrieveStyle(className),
        styleCSS = style.asCSS(className);

    stylesCSS += styleCSS;

    return stylesCSS;
  }, '');

  return stylesCSS;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvc3R5bGVzLmpzIl0sIm5hbWVzIjpbImxleGVycyIsInJlcXVpcmUiLCJwYXJzZXJzIiwiU3R5bGUiLCJDU1NMZXhlciIsIkNTU1BhcnNlciIsImNzc0xleGVyIiwiZnJvbU5vdGhpbmciLCJjc3NQYXJzZXIiLCJzdHlsZU1hcCIsInJlbmRlclN0eWxlcyIsInN0eWxlc0NTUyIsInJldHJpZXZlU3R5bGVzQ1NTIiwiaW5uZXJIVE1MIiwiaGVhZERPTUVsZW1lbnQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJzdHlsZURPTUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiT2JqZWN0IiwiYXNzaWduIiwiYXBwZW5kQ2hpbGQiLCJnZW5lcmF0ZVN0eWxlIiwiYXJncyIsImNsYXNzTmFtZSIsInN1cGVyU3R5bGUiLCJzdHJpbmdzIiwic2hpZnQiLCJjb250ZW50IiwicmVkdWNlIiwiY3NzU3RyaW5nIiwiaW5kZXgiLCJhcmciLCJ0b2tlbnMiLCJ0b2tlbmlzZSIsIm5vZGUiLCJwYXJzZSIsInN0eWxlIiwiZnJvbU5vZGVBbmRUb2tlbnMiLCJleHRlbmRzIiwicmV0cmlldmVTdHlsZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJjbGFzc05hbWVzIiwia2V5cyIsInN0eWxlQ1NTIiwiYXNDU1MiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsSUFBTUEsU0FBU0MsUUFBUSxjQUFSLENBQWY7QUFBQSxJQUF3QztBQUNsQ0MsVUFBVUQsUUFBUSxlQUFSLENBRGhCLEMsQ0FDMEM7O0FBRTFDLElBQU1FLFFBQVFGLFFBQVEsVUFBUixDQUFkOztBQUVNLElBQUVHLFFBQUYsR0FBZUosTUFBZixDQUFFSSxRQUFGO0FBQUEsSUFDRUMsU0FERixHQUNnQkgsT0FEaEIsQ0FDRUcsU0FERjs7O0FBR04sSUFBTUMsV0FBV0YsU0FBU0csV0FBVCxFQUFqQjtBQUFBLElBQ01DLFlBQVlILFVBQVVFLFdBQVYsRUFEbEI7O0FBR0EsSUFBTUUsV0FBVyxFQUFqQjs7QUFFQSxTQUFTQyxZQUFULEdBQXdCO0FBQ3RCLE1BQU1DLFlBQVlDLG1CQUFsQjtBQUFBLE1BQ01DLDZCQUVORixTQUhBO0FBQUEsTUFJSUcsaUJBQWlCQyxTQUFTQyxhQUFULENBQXVCLE1BQXZCLENBSnJCO0FBQUEsTUFLSUMsa0JBQWtCRixTQUFTRyxhQUFULENBQXVCLE9BQXZCLENBTHRCOztBQU9BQyxTQUFPQyxNQUFQLENBQWNILGVBQWQsRUFBK0I7QUFDN0JKO0FBRDZCLEdBQS9COztBQUlBQyxpQkFBZU8sV0FBZixDQUEyQkosZUFBM0I7QUFDRDs7QUFFRCxTQUFTSyxhQUFULENBQXVCQyxJQUF2QixFQUE2QkMsU0FBN0IsRUFBMkQ7QUFBQSxNQUFuQkMsVUFBbUIsdUVBQU4sSUFBTTs7QUFDekQsTUFBTUMsVUFBVUgsS0FBS0ksS0FBTCxFQUFoQjtBQUFBLE1BQThCO0FBQ3hCQyxZQUFVRixRQUFRRyxNQUFSLENBQWUsVUFBU0QsT0FBVCxFQUFrQkUsU0FBbEIsRUFBNkJDLEtBQTdCLEVBQW9DO0FBQzNELFFBQU1DLE1BQU1ULEtBQUtRLEtBQUwsQ0FBWjs7QUFFQUgsZUFBV0UsU0FBWDs7QUFFQSxtQkFBZUUsR0FBZix5Q0FBZUEsR0FBZjtBQUNFLFdBQUssUUFBTDtBQUNFSixtQkFBV0ksR0FBWDtBQUNBOztBQUVGLFdBQUssVUFBTDtBQUNFSixtQkFBV0ksS0FBWDtBQUNBO0FBUEo7O0FBVUEsV0FBT0osT0FBUDtBQUNELEdBaEJTLEVBZ0JQLEVBaEJPLENBRGhCO0FBQUEsTUFrQk1LLFNBQVMzQixTQUFTNEIsUUFBVCxDQUFrQk4sT0FBbEIsQ0FsQmY7QUFBQSxNQW1CTU8sT0FBTzNCLFVBQVU0QixLQUFWLENBQWdCSCxNQUFoQixDQW5CYjtBQUFBLE1Bb0JNSSxRQUFRbEMsTUFBTW1DLGlCQUFOLENBQXdCSCxJQUF4QixFQUE4QkYsTUFBOUIsQ0FwQmQ7O0FBc0JNLE1BQUlSLGVBQWUsSUFBbkIsRUFBeUI7QUFDdkJZLFVBQU1FLE9BQU4sQ0FBY2QsVUFBZDtBQUNEOztBQUVEaEIsV0FBU2UsU0FBVCxJQUFzQmEsS0FBdEI7QUFDUDs7QUFFRCxTQUFTRyxhQUFULENBQXVCaEIsU0FBdkIsRUFBa0M7QUFDaEMsTUFBTWEsUUFBUTVCLFNBQVNlLFNBQVQsQ0FBZDs7QUFFQSxTQUFPYSxLQUFQO0FBQ0Q7O0FBRURJLE9BQU9DLE9BQVAsR0FBaUI7QUFDZmhDLDRCQURlO0FBRWZZLDhCQUZlO0FBR2ZrQjtBQUhlLENBQWpCOztBQU1BLFNBQVM1QixpQkFBVCxHQUE2QjtBQUMzQixNQUFNK0IsYUFBYXhCLE9BQU95QixJQUFQLENBQVluQyxRQUFaLENBQW5CO0FBQUEsTUFDTUUsWUFBWWdDLFdBQVdkLE1BQVgsQ0FBa0IsVUFBU2xCLFNBQVQsRUFBb0JhLFNBQXBCLEVBQStCO0FBQzNELFFBQU1hLFFBQVFHLGNBQWNoQixTQUFkLENBQWQ7QUFBQSxRQUNNcUIsV0FBV1IsTUFBTVMsS0FBTixDQUFZdEIsU0FBWixDQURqQjs7QUFHQWIsaUJBQWFrQyxRQUFiOztBQUVBLFdBQU9sQyxTQUFQO0FBQ0QsR0FQVyxFQU9ULEVBUFMsQ0FEbEI7O0FBVUEsU0FBT0EsU0FBUDtBQUNEIiwiZmlsZSI6InN0eWxlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbGV4ZXJzID0gcmVxdWlyZSgnb2NjYW0tbGV4ZXJzJyksIC8vL1xuICAgICAgcGFyc2VycyA9IHJlcXVpcmUoJ29jY2FtLXBhcnNlcnMnKTsgLy8vXG5cbmNvbnN0IFN0eWxlID0gcmVxdWlyZSgnLi4vc3R5bGUnKTtcblxuY29uc3QgeyBDU1NMZXhlciB9ID0gbGV4ZXJzLFxuICAgICAgeyBDU1NQYXJzZXIgfSA9IHBhcnNlcnM7XG5cbmNvbnN0IGNzc0xleGVyID0gQ1NTTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIGNzc1BhcnNlciA9IENTU1BhcnNlci5mcm9tTm90aGluZygpO1xuXG5jb25zdCBzdHlsZU1hcCA9IHt9O1xuXG5mdW5jdGlvbiByZW5kZXJTdHlsZXMoKSB7XG4gIGNvbnN0IHN0eWxlc0NTUyA9IHJldHJpZXZlU3R5bGVzQ1NTKCksXG4gICAgICAgIGlubmVySFRNTCA9IGBcbiAgICAgICAgXG4ke3N0eWxlc0NTU31gLFxuICAgICAgaGVhZERPTUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkJyksXG4gICAgICBzdHlsZURPTUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuXG4gIE9iamVjdC5hc3NpZ24oc3R5bGVET01FbGVtZW50LCB7XG4gICAgaW5uZXJIVE1MXG4gIH0pO1xuXG4gIGhlYWRET01FbGVtZW50LmFwcGVuZENoaWxkKHN0eWxlRE9NRWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlU3R5bGUoYXJncywgY2xhc3NOYW1lLCBzdXBlclN0eWxlID0gbnVsbCkge1xuICBjb25zdCBzdHJpbmdzID0gYXJncy5zaGlmdCgpLFx0Ly8vXG4gICAgICAgIGNvbnRlbnQgPSBzdHJpbmdzLnJlZHVjZShmdW5jdGlvbihjb250ZW50LCBjc3NTdHJpbmcsIGluZGV4KSB7XG4gICAgICAgICAgY29uc3QgYXJnID0gYXJnc1tpbmRleF07XG5cbiAgICAgICAgICBjb250ZW50ICs9IGNzc1N0cmluZztcblxuICAgICAgICAgIHN3aXRjaCAodHlwZW9mIGFyZykge1xuICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgICAgY29udGVudCArPSBhcmc7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgICAgICAgIGNvbnRlbnQgKz0gYXJnKCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgICB9LCAnJyksXG4gICAgICAgIHRva2VucyA9IGNzc0xleGVyLnRva2VuaXNlKGNvbnRlbnQpLFxuICAgICAgICBub2RlID0gY3NzUGFyc2VyLnBhcnNlKHRva2VucyksXG4gICAgICAgIHN0eWxlID0gU3R5bGUuZnJvbU5vZGVBbmRUb2tlbnMobm9kZSwgdG9rZW5zKTtcblxuICAgICAgICBpZiAoc3VwZXJTdHlsZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHN0eWxlLmV4dGVuZHMoc3VwZXJTdHlsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdHlsZU1hcFtjbGFzc05hbWVdID0gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJldHJpZXZlU3R5bGUoY2xhc3NOYW1lKSB7XG4gIGNvbnN0IHN0eWxlID0gc3R5bGVNYXBbY2xhc3NOYW1lXTtcblxuICByZXR1cm4gc3R5bGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICByZW5kZXJTdHlsZXMsXG4gIGdlbmVyYXRlU3R5bGUsXG4gIHJldHJpZXZlU3R5bGVcbn07XG5cbmZ1bmN0aW9uIHJldHJpZXZlU3R5bGVzQ1NTKCkge1xuICBjb25zdCBjbGFzc05hbWVzID0gT2JqZWN0LmtleXMoc3R5bGVNYXApLFxuICAgICAgICBzdHlsZXNDU1MgPSBjbGFzc05hbWVzLnJlZHVjZShmdW5jdGlvbihzdHlsZXNDU1MsIGNsYXNzTmFtZSkge1xuICAgICAgICAgIGNvbnN0IHN0eWxlID0gcmV0cmlldmVTdHlsZShjbGFzc05hbWUpLFxuICAgICAgICAgICAgICAgIHN0eWxlQ1NTID0gc3R5bGUuYXNDU1MoY2xhc3NOYW1lKTtcblxuICAgICAgICAgIHN0eWxlc0NTUyArPSBzdHlsZUNTUztcblxuICAgICAgICAgIHJldHVybiBzdHlsZXNDU1M7XG4gICAgICAgIH0sICcnKTtcblxuICByZXR1cm4gc3R5bGVzQ1NTO1xufVxuIl19