"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _style = _interopRequireDefault(require("../style"));
var _lexer = _interopRequireDefault(require("../css/lexer"));
var _parser = _interopRequireDefault(require("../css/parser"));
var _constants = require("../constants");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var cssLexer = _lexer.default.fromNothing(), cssParser = _parser.default.fromNothing();
if (!globalThis.styleMap) {
    globalThis.styleMap = {
    };
}
var styleMap = globalThis.styleMap;
function renderStyle(style) {
    var headDOMElement = document.querySelector(_constants.HEAD), styleDOMElement = document.createElement(_constants.STYLE), innerHTML = "\n        \n".concat(style);
    Object.assign(styleDOMElement, {
        innerHTML: innerHTML
    });
    headDOMElement.appendChild(styleDOMElement);
}
function renderStyles() {
    var stylesCSS = retrieveStylesCSS(), style = stylesCSS; ///
    renderStyle(style);
}
function generateStyle(args, className, param) {
    var superStyle = param === void 0 ? null : param;
    var strings = args.shift(), content = strings.reduce(function(content, string, index) {
        var arg = args[index];
        content = arg !== undefined ? "".concat(content).concat(string).concat(arg) : "".concat(content).concat(string);
        return content;
    }, _constants.EMPTY_STRING), tokens = cssLexer.tokenise(content), node = cssParser.parse(tokens), style = _style.default.fromNodeAndTokens(node, tokens);
    if (superStyle !== null) {
        style.extends(superStyle);
    }
    styleMap[className] = style;
}
function retrieveStyle(className) {
    var style = styleMap[className] || null;
    return style;
}
var _default = {
    renderStyle: renderStyle,
    renderStyles: renderStyles,
    generateStyle: generateStyle,
    retrieveStyle: retrieveStyle
};
exports.default = _default;
function retrieveStylesCSS() {
    var classNames = Object.keys(styleMap), stylesCSS = classNames.reduce(function(stylesCSS, className) {
        var style = retrieveStyle(className), styleCSS = style.asCSS(className);
        stylesCSS += styleCSS;
        return stylesCSS;
    }, _constants.EMPTY_STRING);
    return stylesCSS;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvc3R5bGVzLmpzIl0sIm5hbWVzIjpbIlN0eWxlIiwiQ1NTTGV4ZXIiLCJDU1NQYXJzZXIiLCJIRUFEIiwiU1RZTEUiLCJFTVBUWV9TVFJJTkciLCJjc3NMZXhlciIsImZyb21Ob3RoaW5nIiwiY3NzUGFyc2VyIiwiZ2xvYmFsVGhpcyIsInN0eWxlTWFwIiwicmVuZGVyU3R5bGUiLCJzdHlsZSIsImhlYWRET01FbGVtZW50IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwic3R5bGVET01FbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsIk9iamVjdCIsImFzc2lnbiIsImFwcGVuZENoaWxkIiwicmVuZGVyU3R5bGVzIiwic3R5bGVzQ1NTIiwicmV0cmlldmVTdHlsZXNDU1MiLCJnZW5lcmF0ZVN0eWxlIiwiYXJncyIsImNsYXNzTmFtZSIsInN1cGVyU3R5bGUiLCJzdHJpbmdzIiwic2hpZnQiLCJjb250ZW50IiwicmVkdWNlIiwic3RyaW5nIiwiaW5kZXgiLCJhcmciLCJ1bmRlZmluZWQiLCJ0b2tlbnMiLCJ0b2tlbmlzZSIsIm5vZGUiLCJwYXJzZSIsImZyb21Ob2RlQW5kVG9rZW5zIiwiZXh0ZW5kcyIsInJldHJpZXZlU3R5bGUiLCJjbGFzc05hbWVzIiwia2V5cyIsInN0eWxlQ1NTIiwiYXNDU1MiXSwibWFwcGluZ3MiOiJBQUFBLENBQVk7Ozs7O0FBRU0sR0FBVSxDQUFWLE1BQVU7QUFDUCxHQUFjLENBQWQsTUFBYztBQUNiLEdBQWUsQ0FBZixPQUFlO0FBRUssR0FBYyxDQUFkLFVBQWM7Ozs7OztBQUV4RCxHQUFLLENBQUMsUUFBUSxHQUxPLE1BQWMsU0FLVCxXQUFXLElBQy9CLFNBQVMsR0FMTyxPQUFlLFNBS1QsV0FBVztBQUV2QyxFQUFFLEdBQUcsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3pCLFVBQVUsQ0FBQyxRQUFRLEdBQUcsQ0FBQztJQUFBLENBQUM7QUFDMUIsQ0FBQztBQUVELEdBQUssQ0FBRyxRQUFRLEdBQUssVUFBVSxDQUF2QixRQUFRO1NBRVAsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzNCLEdBQUssQ0FBQyxjQUFjLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FaTCxVQUFjLFFBYWhELGVBQWUsR0FBRyxRQUFRLENBQUMsYUFBYSxDQWJOLFVBQWMsU0FjaEQsU0FBUyxHQUFJLENBRXJCLGNBQVEsTUFBQSxDQUFOLEtBQUs7SUFFTCxNQUFNLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQzlCLFNBQVMsRUFBVCxTQUFTO0lBQ1gsQ0FBQztJQUVELGNBQWMsQ0FBQyxXQUFXLENBQUMsZUFBZTtBQUM1QyxDQUFDO1NBRVEsWUFBWSxHQUFHLENBQUM7SUFDdkIsR0FBSyxDQUFDLFNBQVMsR0FBRyxpQkFBaUIsSUFDN0IsS0FBSyxHQUFHLFNBQVMsQ0FBRyxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7SUFFN0IsV0FBVyxDQUFDLEtBQUs7QUFDbkIsQ0FBQztTQUVRLGFBQWEsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQWlCLEVBQUUsQ0FBQztRQUFwQixVQUFVLEdBQVYsS0FBaUIsY0FBSixJQUFJLEdBQWpCLEtBQWlCO0lBQ3ZELEdBQUssQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssSUFDcEIsT0FBTyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFQLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFLLENBQUM7UUFDcEQsR0FBSyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSztRQUV0QixPQUFPLEdBQUksR0FBRyxLQUFLLFNBQVMsR0FDZixDQUFBLEVBQVksTUFBTSxDQUFoQixPQUFPLEVBQVksTUFBRyxDQUFaLE1BQU0sRUFBTyxNQUFBLENBQUosR0FBRyxJQUN0QixDQUFBLEVBQVksTUFBTSxDQUFoQixPQUFPLEVBQVUsTUFBQSxDQUFQLE1BQU07UUFFakMsTUFBTSxDQUFDLE9BQU87SUFDaEIsQ0FBQyxFQTFDaUMsVUFBYyxnQkEyQ2hELE1BQU0sR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLE9BQU8sR0FDbEMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUM3QixLQUFLLEdBakRLLE1BQVUsU0FpRE4saUJBQWlCLENBQUMsSUFBSSxFQUFFLE1BQU07SUFFNUMsRUFBRSxFQUFFLFVBQVUsS0FBSyxJQUFJLEVBQUUsQ0FBQztRQUN4QixLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVU7SUFDMUIsQ0FBQztJQUVELFFBQVEsQ0FBQyxTQUFTLElBQUksS0FBSztBQUNuQyxDQUFDO1NBRVEsYUFBYSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ2pDLEdBQUssQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLFNBQVMsS0FBSyxJQUFJO0lBRXpDLE1BQU0sQ0FBQyxLQUFLO0FBQ2QsQ0FBQztlQUVjLENBQUM7SUFDZCxXQUFXLEVBQVgsV0FBVztJQUNYLFlBQVksRUFBWixZQUFZO0lBQ1osYUFBYSxFQUFiLGFBQWE7SUFDYixhQUFhLEVBQWIsYUFBYTtBQUNmLENBQUM7O1NBRVEsaUJBQWlCLEdBQUcsQ0FBQztJQUM1QixHQUFLLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUNqQyxTQUFTLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQVAsU0FBUyxFQUFFLFNBQVMsRUFBSyxDQUFDO1FBQ3ZELEdBQUssQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFDLFNBQVMsR0FDL0IsUUFBUSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUztRQUV0QyxTQUFTLElBQUksUUFBUTtRQUVyQixNQUFNLENBQUMsU0FBUztJQUNsQixDQUFDLEVBNUVpQyxVQUFjO0lBOEV0RCxNQUFNLENBQUMsU0FBUztBQUNsQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBTdHlsZSBmcm9tIFwiLi4vc3R5bGVcIjtcbmltcG9ydCBDU1NMZXhlciBmcm9tIFwiLi4vY3NzL2xleGVyXCI7XG5pbXBvcnQgQ1NTUGFyc2VyIGZyb20gXCIuLi9jc3MvcGFyc2VyXCI7XG5cbmltcG9ydCB7IEhFQUQsIFNUWUxFLCBFTVBUWV9TVFJJTkcgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5cbmNvbnN0IGNzc0xleGVyID0gQ1NTTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIGNzc1BhcnNlciA9IENTU1BhcnNlci5mcm9tTm90aGluZygpO1xuXG5pZiAoIWdsb2JhbFRoaXMuc3R5bGVNYXApIHtcbiAgZ2xvYmFsVGhpcy5zdHlsZU1hcCA9IHt9O1xufVxuXG5jb25zdCB7IHN0eWxlTWFwIH0gPSBnbG9iYWxUaGlzO1xuXG5mdW5jdGlvbiByZW5kZXJTdHlsZShzdHlsZSkge1xuICBjb25zdCBoZWFkRE9NRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoSEVBRCksXG4gICAgICAgIHN0eWxlRE9NRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoU1RZTEUpLFxuICAgICAgICBpbm5lckhUTUwgPSBgXG4gICAgICAgIFxuJHtzdHlsZX1gO1xuXG4gIE9iamVjdC5hc3NpZ24oc3R5bGVET01FbGVtZW50LCB7XG4gICAgaW5uZXJIVE1MXG4gIH0pO1xuXG4gIGhlYWRET01FbGVtZW50LmFwcGVuZENoaWxkKHN0eWxlRE9NRWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIHJlbmRlclN0eWxlcygpIHtcbiAgY29uc3Qgc3R5bGVzQ1NTID0gcmV0cmlldmVTdHlsZXNDU1MoKSxcbiAgICAgICAgc3R5bGUgPSBzdHlsZXNDU1M7ICAvLy9cblxuICByZW5kZXJTdHlsZShzdHlsZSk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlU3R5bGUoYXJncywgY2xhc3NOYW1lLCBzdXBlclN0eWxlID0gbnVsbCkge1xuICBjb25zdCBzdHJpbmdzID0gYXJncy5zaGlmdCgpLFx0Ly8vXG4gICAgICAgIGNvbnRlbnQgPSBzdHJpbmdzLnJlZHVjZSgoY29udGVudCwgc3RyaW5nLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGFyZyA9IGFyZ3NbaW5kZXhdO1xuXG4gICAgICAgICAgY29udGVudCA9IChhcmcgIT09IHVuZGVmaW5lZCkgP1xuICAgICAgICAgICAgICAgICAgICAgIGAke2NvbnRlbnR9JHtzdHJpbmd9JHthcmd9YCA6XG4gICAgICAgICAgICAgICAgICAgICAgICBgJHtjb250ZW50fSR7c3RyaW5nfWA7XG5cbiAgICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgICAgfSwgRU1QVFlfU1RSSU5HKSxcbiAgICAgICAgdG9rZW5zID0gY3NzTGV4ZXIudG9rZW5pc2UoY29udGVudCksXG4gICAgICAgIG5vZGUgPSBjc3NQYXJzZXIucGFyc2UodG9rZW5zKSxcbiAgICAgICAgc3R5bGUgPSBTdHlsZS5mcm9tTm9kZUFuZFRva2Vucyhub2RlLCB0b2tlbnMpO1xuXG4gICAgICAgIGlmIChzdXBlclN0eWxlICE9PSBudWxsKSB7XG4gICAgICAgICAgc3R5bGUuZXh0ZW5kcyhzdXBlclN0eWxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0eWxlTWFwW2NsYXNzTmFtZV0gPSBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmV0cmlldmVTdHlsZShjbGFzc05hbWUpIHtcbiAgY29uc3Qgc3R5bGUgPSBzdHlsZU1hcFtjbGFzc05hbWVdIHx8IG51bGw7XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHJlbmRlclN0eWxlLFxuICByZW5kZXJTdHlsZXMsXG4gIGdlbmVyYXRlU3R5bGUsXG4gIHJldHJpZXZlU3R5bGVcbn07XG5cbmZ1bmN0aW9uIHJldHJpZXZlU3R5bGVzQ1NTKCkge1xuICBjb25zdCBjbGFzc05hbWVzID0gT2JqZWN0LmtleXMoc3R5bGVNYXApLFxuICAgICAgICBzdHlsZXNDU1MgPSBjbGFzc05hbWVzLnJlZHVjZSgoc3R5bGVzQ1NTLCBjbGFzc05hbWUpID0+IHtcbiAgICAgICAgICBjb25zdCBzdHlsZSA9IHJldHJpZXZlU3R5bGUoY2xhc3NOYW1lKSxcbiAgICAgICAgICAgICAgICBzdHlsZUNTUyA9IHN0eWxlLmFzQ1NTKGNsYXNzTmFtZSk7XG5cbiAgICAgICAgICBzdHlsZXNDU1MgKz0gc3R5bGVDU1M7XG5cbiAgICAgICAgICByZXR1cm4gc3R5bGVzQ1NTO1xuICAgICAgICB9LCBFTVBUWV9TVFJJTkcpO1xuXG4gIHJldHVybiBzdHlsZXNDU1M7XG59XG4iXX0=