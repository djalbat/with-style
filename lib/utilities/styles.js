'use strict';

var Style = require('../style'),
    CSSLexer = require('../css/lexer'),
    CSSParser = require('../css/parser');

var cssLexer = CSSLexer.fromNothing(),
    cssParser = CSSParser.fromNothing();
var styleMap = {};

function renderStyles() {
  var stylesCSS = retrieveStylesCSS(),
      innerHTML = "\n        \n".concat(stylesCSS),
      headDOMElement = document.querySelector('head'),
      styleDOMElement = document.createElement('style');
  Object.assign(styleDOMElement, {
    innerHTML: innerHTML
  });
  headDOMElement.appendChild(styleDOMElement);
}

function generateStyle(args, className) {
  var superStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var strings = args.shift(),
      ///
  content = strings.reduce(function (content, string, index) {
    var arg = args[index];
    content = arg !== undefined ? "".concat(content).concat(string).concat(arg) : "".concat(content).concat(string);
    return content;
  }, ''),
      tokens = cssLexer.tokenise(content),
      node = cssParser.parse(tokens),
      style = Style.fromNodeAndTokens(node, tokens);

  if (superStyle !== null) {
    style["extends"](superStyle);
  }

  styleMap[className] = style;
}

function retrieveStyle(className) {
  var style = styleMap[className];
  return style;
}

module.exports = {
  renderStyles: renderStyles,
  generateStyle: generateStyle,
  retrieveStyle: retrieveStyle
};

function retrieveStylesCSS() {
  var classNames = Object.keys(styleMap),
      stylesCSS = classNames.reduce(function (stylesCSS, className) {
    var style = retrieveStyle(className),
        styleCSS = style.asCSS(className);
    stylesCSS += styleCSS;
    return stylesCSS;
  }, '');
  return stylesCSS;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlcy5qcyJdLCJuYW1lcyI6WyJTdHlsZSIsInJlcXVpcmUiLCJDU1NMZXhlciIsIkNTU1BhcnNlciIsImNzc0xleGVyIiwiZnJvbU5vdGhpbmciLCJjc3NQYXJzZXIiLCJzdHlsZU1hcCIsInJlbmRlclN0eWxlcyIsInN0eWxlc0NTUyIsInJldHJpZXZlU3R5bGVzQ1NTIiwiaW5uZXJIVE1MIiwiaGVhZERPTUVsZW1lbnQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJzdHlsZURPTUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiT2JqZWN0IiwiYXNzaWduIiwiYXBwZW5kQ2hpbGQiLCJnZW5lcmF0ZVN0eWxlIiwiYXJncyIsImNsYXNzTmFtZSIsInN1cGVyU3R5bGUiLCJzdHJpbmdzIiwic2hpZnQiLCJjb250ZW50IiwicmVkdWNlIiwic3RyaW5nIiwiaW5kZXgiLCJhcmciLCJ1bmRlZmluZWQiLCJ0b2tlbnMiLCJ0b2tlbmlzZSIsIm5vZGUiLCJwYXJzZSIsInN0eWxlIiwiZnJvbU5vZGVBbmRUb2tlbnMiLCJyZXRyaWV2ZVN0eWxlIiwibW9kdWxlIiwiZXhwb3J0cyIsImNsYXNzTmFtZXMiLCJrZXlzIiwic3R5bGVDU1MiLCJhc0NTUyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUFyQjtBQUFBLElBQ01DLFFBQVEsR0FBR0QsT0FBTyxDQUFDLGNBQUQsQ0FEeEI7QUFBQSxJQUVNRSxTQUFTLEdBQUdGLE9BQU8sQ0FBQyxlQUFELENBRnpCOztBQUlBLElBQU1HLFFBQVEsR0FBR0YsUUFBUSxDQUFDRyxXQUFULEVBQWpCO0FBQUEsSUFDTUMsU0FBUyxHQUFHSCxTQUFTLENBQUNFLFdBQVYsRUFEbEI7QUFHQSxJQUFNRSxRQUFRLEdBQUcsRUFBakI7O0FBRUEsU0FBU0MsWUFBVCxHQUF3QjtBQUN0QixNQUFNQyxTQUFTLEdBQUdDLGlCQUFpQixFQUFuQztBQUFBLE1BQ01DLFNBQVMseUJBRWZGLFNBRmUsQ0FEZjtBQUFBLE1BSUlHLGNBQWMsR0FBR0MsUUFBUSxDQUFDQyxhQUFULENBQXVCLE1BQXZCLENBSnJCO0FBQUEsTUFLSUMsZUFBZSxHQUFHRixRQUFRLENBQUNHLGFBQVQsQ0FBdUIsT0FBdkIsQ0FMdEI7QUFPQUMsRUFBQUEsTUFBTSxDQUFDQyxNQUFQLENBQWNILGVBQWQsRUFBK0I7QUFDN0JKLElBQUFBLFNBQVMsRUFBVEE7QUFENkIsR0FBL0I7QUFJQUMsRUFBQUEsY0FBYyxDQUFDTyxXQUFmLENBQTJCSixlQUEzQjtBQUNEOztBQUVELFNBQVNLLGFBQVQsQ0FBdUJDLElBQXZCLEVBQTZCQyxTQUE3QixFQUEyRDtBQUFBLE1BQW5CQyxVQUFtQix1RUFBTixJQUFNO0FBQ3pELE1BQU1DLE9BQU8sR0FBR0gsSUFBSSxDQUFDSSxLQUFMLEVBQWhCO0FBQUEsTUFBOEI7QUFDeEJDLEVBQUFBLE9BQU8sR0FBR0YsT0FBTyxDQUFDRyxNQUFSLENBQWUsVUFBU0QsT0FBVCxFQUFrQkUsTUFBbEIsRUFBMEJDLEtBQTFCLEVBQWlDO0FBQ3hELFFBQU1DLEdBQUcsR0FBR1QsSUFBSSxDQUFDUSxLQUFELENBQWhCO0FBRUFILElBQUFBLE9BQU8sR0FBSUksR0FBRyxLQUFLQyxTQUFULGFBQ0tMLE9BREwsU0FDZUUsTUFEZixTQUN3QkUsR0FEeEIsY0FFT0osT0FGUCxTQUVpQkUsTUFGakIsQ0FBVjtBQUlBLFdBQU9GLE9BQVA7QUFDRCxHQVJTLEVBUVAsRUFSTyxDQURoQjtBQUFBLE1BVU1NLE1BQU0sR0FBRzVCLFFBQVEsQ0FBQzZCLFFBQVQsQ0FBa0JQLE9BQWxCLENBVmY7QUFBQSxNQVdNUSxJQUFJLEdBQUc1QixTQUFTLENBQUM2QixLQUFWLENBQWdCSCxNQUFoQixDQVhiO0FBQUEsTUFZTUksS0FBSyxHQUFHcEMsS0FBSyxDQUFDcUMsaUJBQU4sQ0FBd0JILElBQXhCLEVBQThCRixNQUE5QixDQVpkOztBQWNNLE1BQUlULFVBQVUsS0FBSyxJQUFuQixFQUF5QjtBQUN2QmEsSUFBQUEsS0FBSyxXQUFMLENBQWNiLFVBQWQ7QUFDRDs7QUFFRGhCLEVBQUFBLFFBQVEsQ0FBQ2UsU0FBRCxDQUFSLEdBQXNCYyxLQUF0QjtBQUNQOztBQUVELFNBQVNFLGFBQVQsQ0FBdUJoQixTQUF2QixFQUFrQztBQUNoQyxNQUFNYyxLQUFLLEdBQUc3QixRQUFRLENBQUNlLFNBQUQsQ0FBdEI7QUFFQSxTQUFPYyxLQUFQO0FBQ0Q7O0FBRURHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNmaEMsRUFBQUEsWUFBWSxFQUFaQSxZQURlO0FBRWZZLEVBQUFBLGFBQWEsRUFBYkEsYUFGZTtBQUdma0IsRUFBQUEsYUFBYSxFQUFiQTtBQUhlLENBQWpCOztBQU1BLFNBQVM1QixpQkFBVCxHQUE2QjtBQUMzQixNQUFNK0IsVUFBVSxHQUFHeEIsTUFBTSxDQUFDeUIsSUFBUCxDQUFZbkMsUUFBWixDQUFuQjtBQUFBLE1BQ01FLFNBQVMsR0FBR2dDLFVBQVUsQ0FBQ2QsTUFBWCxDQUFrQixVQUFTbEIsU0FBVCxFQUFvQmEsU0FBcEIsRUFBK0I7QUFDM0QsUUFBTWMsS0FBSyxHQUFHRSxhQUFhLENBQUNoQixTQUFELENBQTNCO0FBQUEsUUFDTXFCLFFBQVEsR0FBR1AsS0FBSyxDQUFDUSxLQUFOLENBQVl0QixTQUFaLENBRGpCO0FBR0FiLElBQUFBLFNBQVMsSUFBSWtDLFFBQWI7QUFFQSxXQUFPbEMsU0FBUDtBQUNELEdBUFcsRUFPVCxFQVBTLENBRGxCO0FBVUEsU0FBT0EsU0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBTdHlsZSA9IHJlcXVpcmUoJy4uL3N0eWxlJyksXG4gICAgICBDU1NMZXhlciA9IHJlcXVpcmUoJy4uL2Nzcy9sZXhlcicpLFxuICAgICAgQ1NTUGFyc2VyID0gcmVxdWlyZSgnLi4vY3NzL3BhcnNlcicpO1xuXG5jb25zdCBjc3NMZXhlciA9IENTU0xleGVyLmZyb21Ob3RoaW5nKCksXG4gICAgICBjc3NQYXJzZXIgPSBDU1NQYXJzZXIuZnJvbU5vdGhpbmcoKTtcblxuY29uc3Qgc3R5bGVNYXAgPSB7fTtcblxuZnVuY3Rpb24gcmVuZGVyU3R5bGVzKCkge1xuICBjb25zdCBzdHlsZXNDU1MgPSByZXRyaWV2ZVN0eWxlc0NTUygpLFxuICAgICAgICBpbm5lckhUTUwgPSBgXG4gICAgICAgIFxuJHtzdHlsZXNDU1N9YCxcbiAgICAgIGhlYWRET01FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaGVhZCcpLFxuICAgICAgc3R5bGVET01FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcblxuICBPYmplY3QuYXNzaWduKHN0eWxlRE9NRWxlbWVudCwge1xuICAgIGlubmVySFRNTFxuICB9KTtcblxuICBoZWFkRE9NRWxlbWVudC5hcHBlbmRDaGlsZChzdHlsZURPTUVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVN0eWxlKGFyZ3MsIGNsYXNzTmFtZSwgc3VwZXJTdHlsZSA9IG51bGwpIHtcbiAgY29uc3Qgc3RyaW5ncyA9IGFyZ3Muc2hpZnQoKSxcdC8vL1xuICAgICAgICBjb250ZW50ID0gc3RyaW5ncy5yZWR1Y2UoZnVuY3Rpb24oY29udGVudCwgc3RyaW5nLCBpbmRleCkge1xuICAgICAgICAgIGNvbnN0IGFyZyA9IGFyZ3NbaW5kZXhdO1xuXG4gICAgICAgICAgY29udGVudCA9IChhcmcgIT09IHVuZGVmaW5lZCkgP1xuICAgICAgICAgICAgICAgICAgICAgIGAke2NvbnRlbnR9JHtzdHJpbmd9JHthcmd9YCA6XG4gICAgICAgICAgICAgICAgICAgICAgICBgJHtjb250ZW50fSR7c3RyaW5nfWA7XG5cbiAgICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgICAgfSwgJycpLFxuICAgICAgICB0b2tlbnMgPSBjc3NMZXhlci50b2tlbmlzZShjb250ZW50KSxcbiAgICAgICAgbm9kZSA9IGNzc1BhcnNlci5wYXJzZSh0b2tlbnMpLFxuICAgICAgICBzdHlsZSA9IFN0eWxlLmZyb21Ob2RlQW5kVG9rZW5zKG5vZGUsIHRva2Vucyk7XG5cbiAgICAgICAgaWYgKHN1cGVyU3R5bGUgIT09IG51bGwpIHtcbiAgICAgICAgICBzdHlsZS5leHRlbmRzKHN1cGVyU3R5bGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3R5bGVNYXBbY2xhc3NOYW1lXSA9IHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZXRyaWV2ZVN0eWxlKGNsYXNzTmFtZSkge1xuICBjb25zdCBzdHlsZSA9IHN0eWxlTWFwW2NsYXNzTmFtZV07XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcmVuZGVyU3R5bGVzLFxuICBnZW5lcmF0ZVN0eWxlLFxuICByZXRyaWV2ZVN0eWxlXG59O1xuXG5mdW5jdGlvbiByZXRyaWV2ZVN0eWxlc0NTUygpIHtcbiAgY29uc3QgY2xhc3NOYW1lcyA9IE9iamVjdC5rZXlzKHN0eWxlTWFwKSxcbiAgICAgICAgc3R5bGVzQ1NTID0gY2xhc3NOYW1lcy5yZWR1Y2UoZnVuY3Rpb24oc3R5bGVzQ1NTLCBjbGFzc05hbWUpIHtcbiAgICAgICAgICBjb25zdCBzdHlsZSA9IHJldHJpZXZlU3R5bGUoY2xhc3NOYW1lKSxcbiAgICAgICAgICAgICAgICBzdHlsZUNTUyA9IHN0eWxlLmFzQ1NTKGNsYXNzTmFtZSk7XG5cbiAgICAgICAgICBzdHlsZXNDU1MgKz0gc3R5bGVDU1M7XG5cbiAgICAgICAgICByZXR1cm4gc3R5bGVzQ1NTO1xuICAgICAgICB9LCAnJyk7XG5cbiAgcmV0dXJuIHN0eWxlc0NTUztcbn1cbiJdfQ==