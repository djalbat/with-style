"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _style = /*#__PURE__*/ _interop_require_default(require("../style"));
var _lexer = /*#__PURE__*/ _interop_require_default(require("../css/lexer"));
var _parser = /*#__PURE__*/ _interop_require_default(require("../css/parser"));
var _constants = require("../constants");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var cssLexer = _lexer.default.fromNothing(), cssParser = _parser.default.fromNothing();
if (!globalThis.styleMap) {
    globalThis.styleMap = {};
}
var styleMap = globalThis.styleMap;
function renderStyle(style) {
    var headDOMElement = document.querySelector(_constants.HEAD), styleDOMElement = document.createElement(_constants.STYLE), innerHTML = "        \n".concat(style, "\n");
    Object.assign(styleDOMElement, {
        innerHTML: innerHTML
    });
    headDOMElement.appendChild(styleDOMElement);
    return styleDOMElement;
}
function renderStyles() {
    var stylesCSS = retrieveStylesCSS(), style = stylesCSS; ///
    renderStyle(style);
}
function generateStyle(args, className) {
    var superStyle = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
    var strings = args.shift(), content = strings.reduce(function(content, string, index) {
        var arg = args[index] || null;
        content = arg === null ? "".concat(content).concat(string) : "".concat(content).concat(string).concat(arg);
        return content;
    }, _constants.EMPTY_STRING), tokens = cssLexer.tokenise(content), node = cssParser.parse(tokens), style = _style.default.fromNodeAndTokens(node, tokens);
    if (superStyle !== null) {
        style.extends(superStyle);
    }
    styleMap[className] = style;
}
function retrieveStyle(className) {
    var style = styleMap[className] || null;
    return style;
}
var _default = {
    renderStyle: renderStyle,
    renderStyles: renderStyles,
    generateStyle: generateStyle,
    retrieveStyle: retrieveStyle
};
function retrieveStylesCSS() {
    var classNames = Object.keys(styleMap), stylesCSS = classNames.reduce(function(stylesCSS, className) {
        var style = retrieveStyle(className), styleCSS = style.asCSS(className);
        stylesCSS += styleCSS;
        return stylesCSS;
    }, _constants.EMPTY_STRING);
    return stylesCSS;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvc3R5bGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgU3R5bGUgZnJvbSBcIi4uL3N0eWxlXCI7XG5pbXBvcnQgQ1NTTGV4ZXIgZnJvbSBcIi4uL2Nzcy9sZXhlclwiO1xuaW1wb3J0IENTU1BhcnNlciBmcm9tIFwiLi4vY3NzL3BhcnNlclwiO1xuXG5pbXBvcnQgeyBIRUFELCBTVFlMRSwgRU1QVFlfU1RSSU5HIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuXG5jb25zdCBjc3NMZXhlciA9IENTU0xleGVyLmZyb21Ob3RoaW5nKCksXG4gICAgICBjc3NQYXJzZXIgPSBDU1NQYXJzZXIuZnJvbU5vdGhpbmcoKTtcblxuaWYgKCFnbG9iYWxUaGlzLnN0eWxlTWFwKSB7XG4gIGdsb2JhbFRoaXMuc3R5bGVNYXAgPSB7fTtcbn1cblxuY29uc3QgeyBzdHlsZU1hcCB9ID0gZ2xvYmFsVGhpcztcblxuZnVuY3Rpb24gcmVuZGVyU3R5bGUoc3R5bGUpIHtcbiAgY29uc3QgaGVhZERPTUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKEhFQUQpLFxuICAgICAgICBzdHlsZURPTUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFNUWUxFKSxcbiAgICAgICAgaW5uZXJIVE1MID0gYCAgICAgICAgXG4ke3N0eWxlfVxuYDtcblxuICBPYmplY3QuYXNzaWduKHN0eWxlRE9NRWxlbWVudCwge1xuICAgIGlubmVySFRNTFxuICB9KTtcblxuICBoZWFkRE9NRWxlbWVudC5hcHBlbmRDaGlsZChzdHlsZURPTUVsZW1lbnQpO1xuXG4gIHJldHVybiBzdHlsZURPTUVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIHJlbmRlclN0eWxlcygpIHtcbiAgY29uc3Qgc3R5bGVzQ1NTID0gcmV0cmlldmVTdHlsZXNDU1MoKSxcbiAgICAgICAgc3R5bGUgPSBzdHlsZXNDU1M7ICAvLy9cblxuICByZW5kZXJTdHlsZShzdHlsZSk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlU3R5bGUoYXJncywgY2xhc3NOYW1lLCBzdXBlclN0eWxlID0gbnVsbCkge1xuICBjb25zdCBzdHJpbmdzID0gYXJncy5zaGlmdCgpLFx0Ly8vXG4gICAgICAgIGNvbnRlbnQgPSBzdHJpbmdzLnJlZHVjZSgoY29udGVudCwgc3RyaW5nLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGFyZyA9IGFyZ3NbaW5kZXhdIHx8IG51bGw7XG5cbiAgICAgICAgICBjb250ZW50ID0gKGFyZyA9PT0gbnVsbCkgP1xuICAgICAgICAgICAgICAgICAgICAgIGAke2NvbnRlbnR9JHtzdHJpbmd9YCA6XG4gICAgICAgICAgICAgICAgICAgICAgICBgJHtjb250ZW50fSR7c3RyaW5nfSR7YXJnfWA7XG5cbiAgICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgICAgfSwgRU1QVFlfU1RSSU5HKSxcbiAgICAgICAgdG9rZW5zID0gY3NzTGV4ZXIudG9rZW5pc2UoY29udGVudCksXG4gICAgICAgIG5vZGUgPSBjc3NQYXJzZXIucGFyc2UodG9rZW5zKSxcbiAgICAgICAgc3R5bGUgPSBTdHlsZS5mcm9tTm9kZUFuZFRva2Vucyhub2RlLCB0b2tlbnMpO1xuXG4gIGlmIChzdXBlclN0eWxlICE9PSBudWxsKSB7XG4gICAgc3R5bGUuZXh0ZW5kcyhzdXBlclN0eWxlKTtcbiAgfVxuXG4gIHN0eWxlTWFwW2NsYXNzTmFtZV0gPSBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmV0cmlldmVTdHlsZShjbGFzc05hbWUpIHtcbiAgY29uc3Qgc3R5bGUgPSBzdHlsZU1hcFtjbGFzc05hbWVdIHx8IG51bGw7XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHJlbmRlclN0eWxlLFxuICByZW5kZXJTdHlsZXMsXG4gIGdlbmVyYXRlU3R5bGUsXG4gIHJldHJpZXZlU3R5bGVcbn07XG5cbmZ1bmN0aW9uIHJldHJpZXZlU3R5bGVzQ1NTKCkge1xuICBjb25zdCBjbGFzc05hbWVzID0gT2JqZWN0LmtleXMoc3R5bGVNYXApLFxuICAgICAgICBzdHlsZXNDU1MgPSBjbGFzc05hbWVzLnJlZHVjZSgoc3R5bGVzQ1NTLCBjbGFzc05hbWUpID0+IHtcbiAgICAgICAgICBjb25zdCBzdHlsZSA9IHJldHJpZXZlU3R5bGUoY2xhc3NOYW1lKSxcbiAgICAgICAgICAgICAgICBzdHlsZUNTUyA9IHN0eWxlLmFzQ1NTKGNsYXNzTmFtZSk7XG5cbiAgICAgICAgICBzdHlsZXNDU1MgKz0gc3R5bGVDU1M7XG5cbiAgICAgICAgICByZXR1cm4gc3R5bGVzQ1NTO1xuICAgICAgICB9LCBFTVBUWV9TVFJJTkcpO1xuXG4gIHJldHVybiBzdHlsZXNDU1M7XG59XG4iXSwibmFtZXMiOlsiY3NzTGV4ZXIiLCJDU1NMZXhlciIsImZyb21Ob3RoaW5nIiwiY3NzUGFyc2VyIiwiQ1NTUGFyc2VyIiwiZ2xvYmFsVGhpcyIsInN0eWxlTWFwIiwicmVuZGVyU3R5bGUiLCJzdHlsZSIsImhlYWRET01FbGVtZW50IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiSEVBRCIsInN0eWxlRE9NRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJTVFlMRSIsImlubmVySFRNTCIsIk9iamVjdCIsImFzc2lnbiIsImFwcGVuZENoaWxkIiwicmVuZGVyU3R5bGVzIiwic3R5bGVzQ1NTIiwicmV0cmlldmVTdHlsZXNDU1MiLCJnZW5lcmF0ZVN0eWxlIiwiYXJncyIsImNsYXNzTmFtZSIsInN1cGVyU3R5bGUiLCJzdHJpbmdzIiwic2hpZnQiLCJjb250ZW50IiwicmVkdWNlIiwic3RyaW5nIiwiaW5kZXgiLCJhcmciLCJFTVBUWV9TVFJJTkciLCJ0b2tlbnMiLCJ0b2tlbmlzZSIsIm5vZGUiLCJwYXJzZSIsIlN0eWxlIiwiZnJvbU5vZGVBbmRUb2tlbnMiLCJleHRlbmRzIiwicmV0cmlldmVTdHlsZSIsImNsYXNzTmFtZXMiLCJrZXlzIiwic3R5bGVDU1MiLCJhc0NTUyJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBb0VBOzs7ZUFBQTs7OzREQWxFa0I7NERBQ0c7NkRBQ0M7eUJBRW9COzs7Ozs7QUFFMUMsSUFBTUEsV0FBV0MsY0FBUSxDQUFDQyxXQUFXLElBQy9CQyxZQUFZQyxlQUFTLENBQUNGLFdBQVc7QUFFdkMsSUFBSSxDQUFDRyxXQUFXQyxRQUFRLEVBQUU7SUFDeEJELFdBQVdDLFFBQVEsR0FBRyxDQUFDO0FBQ3pCO0FBRUEsSUFBTSxBQUFFQSxXQUFhRCxXQUFiQztBQUVSLFNBQVNDLFlBQVlDLEtBQUs7SUFDeEIsSUFBTUMsaUJBQWlCQyxTQUFTQyxhQUFhLENBQUNDLGVBQUksR0FDNUNDLGtCQUFrQkgsU0FBU0ksYUFBYSxDQUFDQyxnQkFBSyxHQUM5Q0MsWUFBWSxBQUFDLGFBQ2IsT0FBTlIsT0FBTTtJQUdOUyxPQUFPQyxNQUFNLENBQUNMLGlCQUFpQjtRQUM3QkcsV0FBQUE7SUFDRjtJQUVBUCxlQUFlVSxXQUFXLENBQUNOO0lBRTNCLE9BQU9BO0FBQ1Q7QUFFQSxTQUFTTztJQUNQLElBQU1DLFlBQVlDLHFCQUNaZCxRQUFRYSxXQUFZLEdBQUc7SUFFN0JkLFlBQVlDO0FBQ2Q7QUFFQSxTQUFTZSxjQUFjQyxJQUFJLEVBQUVDLFNBQVM7UUFBRUMsYUFBQUEsaUVBQWE7SUFDbkQsSUFBTUMsVUFBVUgsS0FBS0ksS0FBSyxJQUNwQkMsVUFBVUYsUUFBUUcsTUFBTSxDQUFDLFNBQUNELFNBQVNFLFFBQVFDO1FBQ3pDLElBQU1DLE1BQU1ULElBQUksQ0FBQ1EsTUFBTSxJQUFJO1FBRTNCSCxVQUFVLEFBQUNJLFFBQVEsT0FDUCxBQUFDLEdBQVlGLE9BQVZGLFNBQWlCLE9BQVBFLFVBQ1gsQUFBQyxHQUFZQSxPQUFWRixTQUFtQkksT0FBVEYsUUFBYSxPQUFKRTtRQUVwQyxPQUFPSjtJQUNULEdBQUdLLHVCQUFZLEdBQ2ZDLFNBQVNuQyxTQUFTb0MsUUFBUSxDQUFDUCxVQUMzQlEsT0FBT2xDLFVBQVVtQyxLQUFLLENBQUNILFNBQ3ZCM0IsUUFBUStCLGNBQUssQ0FBQ0MsaUJBQWlCLENBQUNILE1BQU1GO0lBRTVDLElBQUlULGVBQWUsTUFBTTtRQUN2QmxCLE1BQU1pQyxPQUFPLENBQUNmO0lBQ2hCO0lBRUFwQixRQUFRLENBQUNtQixVQUFVLEdBQUdqQjtBQUN4QjtBQUVBLFNBQVNrQyxjQUFjakIsU0FBUztJQUM5QixJQUFNakIsUUFBUUYsUUFBUSxDQUFDbUIsVUFBVSxJQUFJO0lBRXJDLE9BQU9qQjtBQUNUO0lBRUEsV0FBZTtJQUNiRCxhQUFBQTtJQUNBYSxjQUFBQTtJQUNBRyxlQUFBQTtJQUNBbUIsZUFBQUE7QUFDRjtBQUVBLFNBQVNwQjtJQUNQLElBQU1xQixhQUFhMUIsT0FBTzJCLElBQUksQ0FBQ3RDLFdBQ3pCZSxZQUFZc0IsV0FBV2IsTUFBTSxDQUFDLFNBQUNULFdBQVdJO1FBQ3hDLElBQU1qQixRQUFRa0MsY0FBY2pCLFlBQ3RCb0IsV0FBV3JDLE1BQU1zQyxLQUFLLENBQUNyQjtRQUU3QkosYUFBYXdCO1FBRWIsT0FBT3hCO0lBQ1QsR0FBR2EsdUJBQVk7SUFFckIsT0FBT2I7QUFDVCJ9