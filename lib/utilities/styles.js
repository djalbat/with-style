'use strict';

var Style = require('../style'),
    CSSLexer = require('../css/lexer'),
    CSSParser = require('../css/parser');

var cssLexer = CSSLexer.fromNothing(),
    cssParser = CSSParser.fromNothing();

var styleMap = {};

function renderStyles() {
  var stylesCSS = retrieveStylesCSS(),
      innerHTML = '\n        \n' + stylesCSS,
      headDOMElement = document.querySelector('head'),
      styleDOMElement = document.createElement('style');

  Object.assign(styleDOMElement, {
    innerHTML: innerHTML
  });

  headDOMElement.appendChild(styleDOMElement);
}

function generateStyle(args, className) {
  var superStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  var strings = args.shift(),
      ///
  content = strings.reduce(function (content, cssString, index) {
    var arg = args[index];

    content = '' + content + cssString + arg;

    return content;
  }, ''),
      tokens = cssLexer.tokenise(content),
      node = cssParser.parse(tokens),
      style = Style.fromNodeAndTokens(node, tokens);

  if (superStyle !== null) {
    style.extends(superStyle);
  }

  styleMap[className] = style;
}

function retrieveStyle(className) {
  var style = styleMap[className];

  return style;
}

module.exports = {
  renderStyles: renderStyles,
  generateStyle: generateStyle,
  retrieveStyle: retrieveStyle
};

function retrieveStylesCSS() {
  var classNames = Object.keys(styleMap),
      stylesCSS = classNames.reduce(function (stylesCSS, className) {
    var style = retrieveStyle(className),
        styleCSS = style.asCSS(className);

    stylesCSS += styleCSS;

    return stylesCSS;
  }, '');

  return stylesCSS;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvc3R5bGVzLmpzIl0sIm5hbWVzIjpbIlN0eWxlIiwicmVxdWlyZSIsIkNTU0xleGVyIiwiQ1NTUGFyc2VyIiwiY3NzTGV4ZXIiLCJmcm9tTm90aGluZyIsImNzc1BhcnNlciIsInN0eWxlTWFwIiwicmVuZGVyU3R5bGVzIiwic3R5bGVzQ1NTIiwicmV0cmlldmVTdHlsZXNDU1MiLCJpbm5lckhUTUwiLCJoZWFkRE9NRWxlbWVudCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInN0eWxlRE9NRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJPYmplY3QiLCJhc3NpZ24iLCJhcHBlbmRDaGlsZCIsImdlbmVyYXRlU3R5bGUiLCJhcmdzIiwiY2xhc3NOYW1lIiwic3VwZXJTdHlsZSIsInN0cmluZ3MiLCJzaGlmdCIsImNvbnRlbnQiLCJyZWR1Y2UiLCJjc3NTdHJpbmciLCJpbmRleCIsImFyZyIsInRva2VucyIsInRva2VuaXNlIiwibm9kZSIsInBhcnNlIiwic3R5bGUiLCJmcm9tTm9kZUFuZFRva2VucyIsImV4dGVuZHMiLCJyZXRyaWV2ZVN0eWxlIiwibW9kdWxlIiwiZXhwb3J0cyIsImNsYXNzTmFtZXMiLCJrZXlzIiwic3R5bGVDU1MiLCJhc0NTUyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsUUFBUUMsUUFBUSxVQUFSLENBQWQ7QUFBQSxJQUNNQyxXQUFXRCxRQUFRLGNBQVIsQ0FEakI7QUFBQSxJQUVNRSxZQUFZRixRQUFRLGVBQVIsQ0FGbEI7O0FBSUEsSUFBTUcsV0FBV0YsU0FBU0csV0FBVCxFQUFqQjtBQUFBLElBQ01DLFlBQVlILFVBQVVFLFdBQVYsRUFEbEI7O0FBR0EsSUFBTUUsV0FBVyxFQUFqQjs7QUFFQSxTQUFTQyxZQUFULEdBQXdCO0FBQ3RCLE1BQU1DLFlBQVlDLG1CQUFsQjtBQUFBLE1BQ01DLDZCQUVORixTQUhBO0FBQUEsTUFJSUcsaUJBQWlCQyxTQUFTQyxhQUFULENBQXVCLE1BQXZCLENBSnJCO0FBQUEsTUFLSUMsa0JBQWtCRixTQUFTRyxhQUFULENBQXVCLE9BQXZCLENBTHRCOztBQU9BQyxTQUFPQyxNQUFQLENBQWNILGVBQWQsRUFBK0I7QUFDN0JKO0FBRDZCLEdBQS9COztBQUlBQyxpQkFBZU8sV0FBZixDQUEyQkosZUFBM0I7QUFDRDs7QUFFRCxTQUFTSyxhQUFULENBQXVCQyxJQUF2QixFQUE2QkMsU0FBN0IsRUFBMkQ7QUFBQSxNQUFuQkMsVUFBbUIsdUVBQU4sSUFBTTs7QUFDekQsTUFBTUMsVUFBVUgsS0FBS0ksS0FBTCxFQUFoQjtBQUFBLE1BQThCO0FBQ3hCQyxZQUFVRixRQUFRRyxNQUFSLENBQWUsVUFBU0QsT0FBVCxFQUFrQkUsU0FBbEIsRUFBNkJDLEtBQTdCLEVBQW9DO0FBQzNELFFBQU1DLE1BQU1ULEtBQUtRLEtBQUwsQ0FBWjs7QUFFQUgsbUJBQWFBLE9BQWIsR0FBdUJFLFNBQXZCLEdBQW1DRSxHQUFuQzs7QUFFQSxXQUFPSixPQUFQO0FBQ0QsR0FOUyxFQU1QLEVBTk8sQ0FEaEI7QUFBQSxNQVFNSyxTQUFTM0IsU0FBUzRCLFFBQVQsQ0FBa0JOLE9BQWxCLENBUmY7QUFBQSxNQVNNTyxPQUFPM0IsVUFBVTRCLEtBQVYsQ0FBZ0JILE1BQWhCLENBVGI7QUFBQSxNQVVNSSxRQUFRbkMsTUFBTW9DLGlCQUFOLENBQXdCSCxJQUF4QixFQUE4QkYsTUFBOUIsQ0FWZDs7QUFZTSxNQUFJUixlQUFlLElBQW5CLEVBQXlCO0FBQ3ZCWSxVQUFNRSxPQUFOLENBQWNkLFVBQWQ7QUFDRDs7QUFFRGhCLFdBQVNlLFNBQVQsSUFBc0JhLEtBQXRCO0FBQ1A7O0FBRUQsU0FBU0csYUFBVCxDQUF1QmhCLFNBQXZCLEVBQWtDO0FBQ2hDLE1BQU1hLFFBQVE1QixTQUFTZSxTQUFULENBQWQ7O0FBRUEsU0FBT2EsS0FBUDtBQUNEOztBQUVESSxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZoQyw0QkFEZTtBQUVmWSw4QkFGZTtBQUdma0I7QUFIZSxDQUFqQjs7QUFNQSxTQUFTNUIsaUJBQVQsR0FBNkI7QUFDM0IsTUFBTStCLGFBQWF4QixPQUFPeUIsSUFBUCxDQUFZbkMsUUFBWixDQUFuQjtBQUFBLE1BQ01FLFlBQVlnQyxXQUFXZCxNQUFYLENBQWtCLFVBQVNsQixTQUFULEVBQW9CYSxTQUFwQixFQUErQjtBQUMzRCxRQUFNYSxRQUFRRyxjQUFjaEIsU0FBZCxDQUFkO0FBQUEsUUFDTXFCLFdBQVdSLE1BQU1TLEtBQU4sQ0FBWXRCLFNBQVosQ0FEakI7O0FBR0FiLGlCQUFha0MsUUFBYjs7QUFFQSxXQUFPbEMsU0FBUDtBQUNELEdBUFcsRUFPVCxFQVBTLENBRGxCOztBQVVBLFNBQU9BLFNBQVA7QUFDRCIsImZpbGUiOiJzdHlsZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFN0eWxlID0gcmVxdWlyZSgnLi4vc3R5bGUnKSxcbiAgICAgIENTU0xleGVyID0gcmVxdWlyZSgnLi4vY3NzL2xleGVyJyksXG4gICAgICBDU1NQYXJzZXIgPSByZXF1aXJlKCcuLi9jc3MvcGFyc2VyJyk7XG5cbmNvbnN0IGNzc0xleGVyID0gQ1NTTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIGNzc1BhcnNlciA9IENTU1BhcnNlci5mcm9tTm90aGluZygpO1xuXG5jb25zdCBzdHlsZU1hcCA9IHt9O1xuXG5mdW5jdGlvbiByZW5kZXJTdHlsZXMoKSB7XG4gIGNvbnN0IHN0eWxlc0NTUyA9IHJldHJpZXZlU3R5bGVzQ1NTKCksXG4gICAgICAgIGlubmVySFRNTCA9IGBcbiAgICAgICAgXG4ke3N0eWxlc0NTU31gLFxuICAgICAgaGVhZERPTUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkJyksXG4gICAgICBzdHlsZURPTUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuXG4gIE9iamVjdC5hc3NpZ24oc3R5bGVET01FbGVtZW50LCB7XG4gICAgaW5uZXJIVE1MXG4gIH0pO1xuXG4gIGhlYWRET01FbGVtZW50LmFwcGVuZENoaWxkKHN0eWxlRE9NRWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlU3R5bGUoYXJncywgY2xhc3NOYW1lLCBzdXBlclN0eWxlID0gbnVsbCkge1xuICBjb25zdCBzdHJpbmdzID0gYXJncy5zaGlmdCgpLFx0Ly8vXG4gICAgICAgIGNvbnRlbnQgPSBzdHJpbmdzLnJlZHVjZShmdW5jdGlvbihjb250ZW50LCBjc3NTdHJpbmcsIGluZGV4KSB7XG4gICAgICAgICAgY29uc3QgYXJnID0gYXJnc1tpbmRleF07XG5cbiAgICAgICAgICBjb250ZW50ID0gYCR7Y29udGVudH0ke2Nzc1N0cmluZ30ke2FyZ31gO1xuICAgICAgICAgIFxuICAgICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgICB9LCAnJyksXG4gICAgICAgIHRva2VucyA9IGNzc0xleGVyLnRva2VuaXNlKGNvbnRlbnQpLFxuICAgICAgICBub2RlID0gY3NzUGFyc2VyLnBhcnNlKHRva2VucyksXG4gICAgICAgIHN0eWxlID0gU3R5bGUuZnJvbU5vZGVBbmRUb2tlbnMobm9kZSwgdG9rZW5zKTtcblxuICAgICAgICBpZiAoc3VwZXJTdHlsZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHN0eWxlLmV4dGVuZHMoc3VwZXJTdHlsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdHlsZU1hcFtjbGFzc05hbWVdID0gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJldHJpZXZlU3R5bGUoY2xhc3NOYW1lKSB7XG4gIGNvbnN0IHN0eWxlID0gc3R5bGVNYXBbY2xhc3NOYW1lXTtcblxuICByZXR1cm4gc3R5bGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICByZW5kZXJTdHlsZXMsXG4gIGdlbmVyYXRlU3R5bGUsXG4gIHJldHJpZXZlU3R5bGVcbn07XG5cbmZ1bmN0aW9uIHJldHJpZXZlU3R5bGVzQ1NTKCkge1xuICBjb25zdCBjbGFzc05hbWVzID0gT2JqZWN0LmtleXMoc3R5bGVNYXApLFxuICAgICAgICBzdHlsZXNDU1MgPSBjbGFzc05hbWVzLnJlZHVjZShmdW5jdGlvbihzdHlsZXNDU1MsIGNsYXNzTmFtZSkge1xuICAgICAgICAgIGNvbnN0IHN0eWxlID0gcmV0cmlldmVTdHlsZShjbGFzc05hbWUpLFxuICAgICAgICAgICAgICAgIHN0eWxlQ1NTID0gc3R5bGUuYXNDU1MoY2xhc3NOYW1lKTtcblxuICAgICAgICAgIHN0eWxlc0NTUyArPSBzdHlsZUNTUztcblxuICAgICAgICAgIHJldHVybiBzdHlsZXNDU1M7XG4gICAgICAgIH0sICcnKTtcblxuICByZXR1cm4gc3R5bGVzQ1NTO1xufVxuIl19