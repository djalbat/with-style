'use strict';

var Style = require('../style'),
    CSSLexer = require('../css/lexer'),
    CSSParser = require('../css/parser');

var cssLexer = CSSLexer.fromNothing(),
    cssParser = CSSParser.fromNothing();

var styleMap = {};

function renderStyles() {
  var stylesCSS = retrieveStylesCSS(),
      innerHTML = '\n        \n' + stylesCSS,
      headDOMElement = document.querySelector('head'),
      styleDOMElement = document.createElement('style');

  Object.assign(styleDOMElement, {
    innerHTML: innerHTML
  });

  headDOMElement.appendChild(styleDOMElement);
}

function generateStyle(args, className) {
  var superStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  var strings = args.shift(),
      ///
  content = strings.reduce(function (content, string, index) {
    var arg = args[index];

    content = arg !== undefined ? '' + content + string + arg : '' + content + string;

    return content;
  }, ''),
      tokens = cssLexer.tokenise(content),
      node = cssParser.parse(tokens),
      style = Style.fromNodeAndTokens(node, tokens);

  if (superStyle !== null) {
    style.extends(superStyle);
  }

  styleMap[className] = style;
}

function retrieveStyle(className) {
  var style = styleMap[className];

  return style;
}

module.exports = {
  renderStyles: renderStyles,
  generateStyle: generateStyle,
  retrieveStyle: retrieveStyle
};

function retrieveStylesCSS() {
  var classNames = Object.keys(styleMap),
      stylesCSS = classNames.reduce(function (stylesCSS, className) {
    var style = retrieveStyle(className),
        styleCSS = style.asCSS(className);

    stylesCSS += styleCSS;

    return stylesCSS;
  }, '');

  return stylesCSS;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvc3R5bGVzLmpzIl0sIm5hbWVzIjpbIlN0eWxlIiwicmVxdWlyZSIsIkNTU0xleGVyIiwiQ1NTUGFyc2VyIiwiY3NzTGV4ZXIiLCJmcm9tTm90aGluZyIsImNzc1BhcnNlciIsInN0eWxlTWFwIiwicmVuZGVyU3R5bGVzIiwic3R5bGVzQ1NTIiwicmV0cmlldmVTdHlsZXNDU1MiLCJpbm5lckhUTUwiLCJoZWFkRE9NRWxlbWVudCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInN0eWxlRE9NRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJPYmplY3QiLCJhc3NpZ24iLCJhcHBlbmRDaGlsZCIsImdlbmVyYXRlU3R5bGUiLCJhcmdzIiwiY2xhc3NOYW1lIiwic3VwZXJTdHlsZSIsInN0cmluZ3MiLCJzaGlmdCIsImNvbnRlbnQiLCJyZWR1Y2UiLCJzdHJpbmciLCJpbmRleCIsImFyZyIsInVuZGVmaW5lZCIsInRva2VucyIsInRva2VuaXNlIiwibm9kZSIsInBhcnNlIiwic3R5bGUiLCJmcm9tTm9kZUFuZFRva2VucyIsImV4dGVuZHMiLCJyZXRyaWV2ZVN0eWxlIiwibW9kdWxlIiwiZXhwb3J0cyIsImNsYXNzTmFtZXMiLCJrZXlzIiwic3R5bGVDU1MiLCJhc0NTUyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsUUFBUUMsUUFBUSxVQUFSLENBQWQ7QUFBQSxJQUNNQyxXQUFXRCxRQUFRLGNBQVIsQ0FEakI7QUFBQSxJQUVNRSxZQUFZRixRQUFRLGVBQVIsQ0FGbEI7O0FBSUEsSUFBTUcsV0FBV0YsU0FBU0csV0FBVCxFQUFqQjtBQUFBLElBQ01DLFlBQVlILFVBQVVFLFdBQVYsRUFEbEI7O0FBR0EsSUFBTUUsV0FBVyxFQUFqQjs7QUFFQSxTQUFTQyxZQUFULEdBQXdCO0FBQ3RCLE1BQU1DLFlBQVlDLG1CQUFsQjtBQUFBLE1BQ01DLDZCQUVORixTQUhBO0FBQUEsTUFJSUcsaUJBQWlCQyxTQUFTQyxhQUFULENBQXVCLE1BQXZCLENBSnJCO0FBQUEsTUFLSUMsa0JBQWtCRixTQUFTRyxhQUFULENBQXVCLE9BQXZCLENBTHRCOztBQU9BQyxTQUFPQyxNQUFQLENBQWNILGVBQWQsRUFBK0I7QUFDN0JKO0FBRDZCLEdBQS9COztBQUlBQyxpQkFBZU8sV0FBZixDQUEyQkosZUFBM0I7QUFDRDs7QUFFRCxTQUFTSyxhQUFULENBQXVCQyxJQUF2QixFQUE2QkMsU0FBN0IsRUFBMkQ7QUFBQSxNQUFuQkMsVUFBbUIsdUVBQU4sSUFBTTs7QUFDekQsTUFBTUMsVUFBVUgsS0FBS0ksS0FBTCxFQUFoQjtBQUFBLE1BQThCO0FBQ3hCQyxZQUFVRixRQUFRRyxNQUFSLENBQWUsVUFBU0QsT0FBVCxFQUFrQkUsTUFBbEIsRUFBMEJDLEtBQTFCLEVBQWlDO0FBQ3hELFFBQU1DLE1BQU1ULEtBQUtRLEtBQUwsQ0FBWjs7QUFFQUgsY0FBV0ksUUFBUUMsU0FBVCxRQUNLTCxPQURMLEdBQ2VFLE1BRGYsR0FDd0JFLEdBRHhCLFFBRU9KLE9BRlAsR0FFaUJFLE1BRjNCOztBQUlBLFdBQU9GLE9BQVA7QUFDRCxHQVJTLEVBUVAsRUFSTyxDQURoQjtBQUFBLE1BVU1NLFNBQVM1QixTQUFTNkIsUUFBVCxDQUFrQlAsT0FBbEIsQ0FWZjtBQUFBLE1BV01RLE9BQU81QixVQUFVNkIsS0FBVixDQUFnQkgsTUFBaEIsQ0FYYjtBQUFBLE1BWU1JLFFBQVFwQyxNQUFNcUMsaUJBQU4sQ0FBd0JILElBQXhCLEVBQThCRixNQUE5QixDQVpkOztBQWNNLE1BQUlULGVBQWUsSUFBbkIsRUFBeUI7QUFDdkJhLFVBQU1FLE9BQU4sQ0FBY2YsVUFBZDtBQUNEOztBQUVEaEIsV0FBU2UsU0FBVCxJQUFzQmMsS0FBdEI7QUFDUDs7QUFFRCxTQUFTRyxhQUFULENBQXVCakIsU0FBdkIsRUFBa0M7QUFDaEMsTUFBTWMsUUFBUTdCLFNBQVNlLFNBQVQsQ0FBZDs7QUFFQSxTQUFPYyxLQUFQO0FBQ0Q7O0FBRURJLE9BQU9DLE9BQVAsR0FBaUI7QUFDZmpDLDRCQURlO0FBRWZZLDhCQUZlO0FBR2ZtQjtBQUhlLENBQWpCOztBQU1BLFNBQVM3QixpQkFBVCxHQUE2QjtBQUMzQixNQUFNZ0MsYUFBYXpCLE9BQU8wQixJQUFQLENBQVlwQyxRQUFaLENBQW5CO0FBQUEsTUFDTUUsWUFBWWlDLFdBQVdmLE1BQVgsQ0FBa0IsVUFBU2xCLFNBQVQsRUFBb0JhLFNBQXBCLEVBQStCO0FBQzNELFFBQU1jLFFBQVFHLGNBQWNqQixTQUFkLENBQWQ7QUFBQSxRQUNNc0IsV0FBV1IsTUFBTVMsS0FBTixDQUFZdkIsU0FBWixDQURqQjs7QUFHQWIsaUJBQWFtQyxRQUFiOztBQUVBLFdBQU9uQyxTQUFQO0FBQ0QsR0FQVyxFQU9ULEVBUFMsQ0FEbEI7O0FBVUEsU0FBT0EsU0FBUDtBQUNEIiwiZmlsZSI6InN0eWxlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgU3R5bGUgPSByZXF1aXJlKCcuLi9zdHlsZScpLFxuICAgICAgQ1NTTGV4ZXIgPSByZXF1aXJlKCcuLi9jc3MvbGV4ZXInKSxcbiAgICAgIENTU1BhcnNlciA9IHJlcXVpcmUoJy4uL2Nzcy9wYXJzZXInKTtcblxuY29uc3QgY3NzTGV4ZXIgPSBDU1NMZXhlci5mcm9tTm90aGluZygpLFxuICAgICAgY3NzUGFyc2VyID0gQ1NTUGFyc2VyLmZyb21Ob3RoaW5nKCk7XG5cbmNvbnN0IHN0eWxlTWFwID0ge307XG5cbmZ1bmN0aW9uIHJlbmRlclN0eWxlcygpIHtcbiAgY29uc3Qgc3R5bGVzQ1NTID0gcmV0cmlldmVTdHlsZXNDU1MoKSxcbiAgICAgICAgaW5uZXJIVE1MID0gYFxuICAgICAgICBcbiR7c3R5bGVzQ1NTfWAsXG4gICAgICBoZWFkRE9NRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQnKSxcbiAgICAgIHN0eWxlRE9NRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG5cbiAgT2JqZWN0LmFzc2lnbihzdHlsZURPTUVsZW1lbnQsIHtcbiAgICBpbm5lckhUTUxcbiAgfSk7XG5cbiAgaGVhZERPTUVsZW1lbnQuYXBwZW5kQ2hpbGQoc3R5bGVET01FbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVTdHlsZShhcmdzLCBjbGFzc05hbWUsIHN1cGVyU3R5bGUgPSBudWxsKSB7XG4gIGNvbnN0IHN0cmluZ3MgPSBhcmdzLnNoaWZ0KCksXHQvLy9cbiAgICAgICAgY29udGVudCA9IHN0cmluZ3MucmVkdWNlKGZ1bmN0aW9uKGNvbnRlbnQsIHN0cmluZywgaW5kZXgpIHtcbiAgICAgICAgICBjb25zdCBhcmcgPSBhcmdzW2luZGV4XTtcblxuICAgICAgICAgIGNvbnRlbnQgPSAoYXJnICE9PSB1bmRlZmluZWQpID9cbiAgICAgICAgICAgICAgICAgICAgICBgJHtjb250ZW50fSR7c3RyaW5nfSR7YXJnfWAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgYCR7Y29udGVudH0ke3N0cmluZ31gO1xuXG4gICAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICAgIH0sICcnKSxcbiAgICAgICAgdG9rZW5zID0gY3NzTGV4ZXIudG9rZW5pc2UoY29udGVudCksXG4gICAgICAgIG5vZGUgPSBjc3NQYXJzZXIucGFyc2UodG9rZW5zKSxcbiAgICAgICAgc3R5bGUgPSBTdHlsZS5mcm9tTm9kZUFuZFRva2Vucyhub2RlLCB0b2tlbnMpO1xuXG4gICAgICAgIGlmIChzdXBlclN0eWxlICE9PSBudWxsKSB7XG4gICAgICAgICAgc3R5bGUuZXh0ZW5kcyhzdXBlclN0eWxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0eWxlTWFwW2NsYXNzTmFtZV0gPSBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmV0cmlldmVTdHlsZShjbGFzc05hbWUpIHtcbiAgY29uc3Qgc3R5bGUgPSBzdHlsZU1hcFtjbGFzc05hbWVdO1xuXG4gIHJldHVybiBzdHlsZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHJlbmRlclN0eWxlcyxcbiAgZ2VuZXJhdGVTdHlsZSxcbiAgcmV0cmlldmVTdHlsZVxufTtcblxuZnVuY3Rpb24gcmV0cmlldmVTdHlsZXNDU1MoKSB7XG4gIGNvbnN0IGNsYXNzTmFtZXMgPSBPYmplY3Qua2V5cyhzdHlsZU1hcCksXG4gICAgICAgIHN0eWxlc0NTUyA9IGNsYXNzTmFtZXMucmVkdWNlKGZ1bmN0aW9uKHN0eWxlc0NTUywgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgY29uc3Qgc3R5bGUgPSByZXRyaWV2ZVN0eWxlKGNsYXNzTmFtZSksXG4gICAgICAgICAgICAgICAgc3R5bGVDU1MgPSBzdHlsZS5hc0NTUyhjbGFzc05hbWUpO1xuXG4gICAgICAgICAgc3R5bGVzQ1NTICs9IHN0eWxlQ1NTO1xuXG4gICAgICAgICAgcmV0dXJuIHN0eWxlc0NTUztcbiAgICAgICAgfSwgJycpO1xuXG4gIHJldHVybiBzdHlsZXNDU1M7XG59XG4iXX0=