'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderStyles = renderStyles;
exports.generateStyle = generateStyle;
exports.retrieveStyle = retrieveStyle;
exports["default"] = void 0;

var _style = _interopRequireDefault(require("../style"));

var _lexer = _interopRequireDefault(require("../css/lexer"));

var _parser = _interopRequireDefault(require("../css/parser"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var cssLexer = _lexer["default"].fromNothing(),
    cssParser = _parser["default"].fromNothing();

var styleMap = {};

function renderStyles() {
  var stylesCSS = retrieveStylesCSS(),
      innerHTML = "\n        \n".concat(stylesCSS),
      headDOMElement = document.querySelector('head'),
      styleDOMElement = document.createElement('style');
  Object.assign(styleDOMElement, {
    innerHTML: innerHTML
  });
  headDOMElement.appendChild(styleDOMElement);
}

function generateStyle(args, className) {
  var superStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  var strings = args.shift(),
      ///
  content = strings.reduce(function (content, string, index) {
    var arg = args[index];
    content = arg !== undefined ? "".concat(content).concat(string).concat(arg) : "".concat(content).concat(string);
    return content;
  }, ''),
      tokens = cssLexer.tokenise(content),
      node = cssParser.parse(tokens),
      style = _style["default"].fromNodeAndTokens(node, tokens);

  if (superStyle !== null) {
    style["extends"](superStyle);
  }

  styleMap[className] = style;
}

function retrieveStyle(className) {
  var style = styleMap[className] || null;
  return style;
}

var _default = {
  renderStyles: renderStyles,
  generateStyle: generateStyle,
  retrieveStyle: retrieveStyle
};
exports["default"] = _default;

function retrieveStylesCSS() {
  var classNames = Object.keys(styleMap),
      stylesCSS = classNames.reduce(function (stylesCSS, className) {
    var style = retrieveStyle(className),
        styleCSS = style.asCSS(className);
    stylesCSS += styleCSS;
    return stylesCSS;
  }, '');
  return stylesCSS;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlcy5qcyJdLCJuYW1lcyI6WyJjc3NMZXhlciIsIkNTU0xleGVyIiwiZnJvbU5vdGhpbmciLCJjc3NQYXJzZXIiLCJDU1NQYXJzZXIiLCJzdHlsZU1hcCIsInJlbmRlclN0eWxlcyIsInN0eWxlc0NTUyIsInJldHJpZXZlU3R5bGVzQ1NTIiwiaW5uZXJIVE1MIiwiaGVhZERPTUVsZW1lbnQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJzdHlsZURPTUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiT2JqZWN0IiwiYXNzaWduIiwiYXBwZW5kQ2hpbGQiLCJnZW5lcmF0ZVN0eWxlIiwiYXJncyIsImNsYXNzTmFtZSIsInN1cGVyU3R5bGUiLCJzdHJpbmdzIiwic2hpZnQiLCJjb250ZW50IiwicmVkdWNlIiwic3RyaW5nIiwiaW5kZXgiLCJhcmciLCJ1bmRlZmluZWQiLCJ0b2tlbnMiLCJ0b2tlbmlzZSIsIm5vZGUiLCJwYXJzZSIsInN0eWxlIiwiU3R5bGUiLCJmcm9tTm9kZUFuZFRva2VucyIsInJldHJpZXZlU3R5bGUiLCJjbGFzc05hbWVzIiwia2V5cyIsInN0eWxlQ1NTIiwiYXNDU1MiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxJQUFNQSxRQUFRLEdBQUdDLGtCQUFTQyxXQUFULEVBQWpCO0FBQUEsSUFDTUMsU0FBUyxHQUFHQyxtQkFBVUYsV0FBVixFQURsQjs7QUFHQSxJQUFNRyxRQUFRLEdBQUcsRUFBakI7O0FBRU8sU0FBU0MsWUFBVCxHQUF3QjtBQUM3QixNQUFNQyxTQUFTLEdBQUdDLGlCQUFpQixFQUFuQztBQUFBLE1BQ01DLFNBQVMseUJBRWZGLFNBRmUsQ0FEZjtBQUFBLE1BSUlHLGNBQWMsR0FBR0MsUUFBUSxDQUFDQyxhQUFULENBQXVCLE1BQXZCLENBSnJCO0FBQUEsTUFLSUMsZUFBZSxHQUFHRixRQUFRLENBQUNHLGFBQVQsQ0FBdUIsT0FBdkIsQ0FMdEI7QUFPQUMsRUFBQUEsTUFBTSxDQUFDQyxNQUFQLENBQWNILGVBQWQsRUFBK0I7QUFDN0JKLElBQUFBLFNBQVMsRUFBVEE7QUFENkIsR0FBL0I7QUFJQUMsRUFBQUEsY0FBYyxDQUFDTyxXQUFmLENBQTJCSixlQUEzQjtBQUNEOztBQUVNLFNBQVNLLGFBQVQsQ0FBdUJDLElBQXZCLEVBQTZCQyxTQUE3QixFQUEyRDtBQUFBLE1BQW5CQyxVQUFtQix1RUFBTixJQUFNOztBQUNoRSxNQUFNQyxPQUFPLEdBQUdILElBQUksQ0FBQ0ksS0FBTCxFQUFoQjtBQUFBLE1BQThCO0FBQ3hCQyxFQUFBQSxPQUFPLEdBQUdGLE9BQU8sQ0FBQ0csTUFBUixDQUFlLFVBQUNELE9BQUQsRUFBVUUsTUFBVixFQUFrQkMsS0FBbEIsRUFBNEI7QUFDbkQsUUFBTUMsR0FBRyxHQUFHVCxJQUFJLENBQUNRLEtBQUQsQ0FBaEI7QUFFQUgsSUFBQUEsT0FBTyxHQUFJSSxHQUFHLEtBQUtDLFNBQVQsYUFDS0wsT0FETCxTQUNlRSxNQURmLFNBQ3dCRSxHQUR4QixjQUVPSixPQUZQLFNBRWlCRSxNQUZqQixDQUFWO0FBSUEsV0FBT0YsT0FBUDtBQUNELEdBUlMsRUFRUCxFQVJPLENBRGhCO0FBQUEsTUFVTU0sTUFBTSxHQUFHOUIsUUFBUSxDQUFDK0IsUUFBVCxDQUFrQlAsT0FBbEIsQ0FWZjtBQUFBLE1BV01RLElBQUksR0FBRzdCLFNBQVMsQ0FBQzhCLEtBQVYsQ0FBZ0JILE1BQWhCLENBWGI7QUFBQSxNQVlNSSxLQUFLLEdBQUdDLGtCQUFNQyxpQkFBTixDQUF3QkosSUFBeEIsRUFBOEJGLE1BQTlCLENBWmQ7O0FBY00sTUFBSVQsVUFBVSxLQUFLLElBQW5CLEVBQXlCO0FBQ3ZCYSxJQUFBQSxLQUFLLFdBQUwsQ0FBY2IsVUFBZDtBQUNEOztBQUVEaEIsRUFBQUEsUUFBUSxDQUFDZSxTQUFELENBQVIsR0FBc0JjLEtBQXRCO0FBQ1A7O0FBRU0sU0FBU0csYUFBVCxDQUF1QmpCLFNBQXZCLEVBQWtDO0FBQ3ZDLE1BQU1jLEtBQUssR0FBRzdCLFFBQVEsQ0FBQ2UsU0FBRCxDQUFSLElBQXVCLElBQXJDO0FBRUEsU0FBT2MsS0FBUDtBQUNEOztlQUVjO0FBQ2I1QixFQUFBQSxZQUFZLEVBQVpBLFlBRGE7QUFFYlksRUFBQUEsYUFBYSxFQUFiQSxhQUZhO0FBR2JtQixFQUFBQSxhQUFhLEVBQWJBO0FBSGEsQzs7O0FBTWYsU0FBUzdCLGlCQUFULEdBQTZCO0FBQzNCLE1BQU04QixVQUFVLEdBQUd2QixNQUFNLENBQUN3QixJQUFQLENBQVlsQyxRQUFaLENBQW5CO0FBQUEsTUFDTUUsU0FBUyxHQUFHK0IsVUFBVSxDQUFDYixNQUFYLENBQWtCLFVBQUNsQixTQUFELEVBQVlhLFNBQVosRUFBMEI7QUFDdEQsUUFBTWMsS0FBSyxHQUFHRyxhQUFhLENBQUNqQixTQUFELENBQTNCO0FBQUEsUUFDTW9CLFFBQVEsR0FBR04sS0FBSyxDQUFDTyxLQUFOLENBQVlyQixTQUFaLENBRGpCO0FBR0FiLElBQUFBLFNBQVMsSUFBSWlDLFFBQWI7QUFFQSxXQUFPakMsU0FBUDtBQUNELEdBUFcsRUFPVCxFQVBTLENBRGxCO0FBVUEsU0FBT0EsU0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgU3R5bGUgZnJvbSAnLi4vc3R5bGUnO1xuaW1wb3J0IENTU0xleGVyIGZyb20gJy4uL2Nzcy9sZXhlcic7XG5pbXBvcnQgQ1NTUGFyc2VyIGZyb20gJy4uL2Nzcy9wYXJzZXInO1xuXG5jb25zdCBjc3NMZXhlciA9IENTU0xleGVyLmZyb21Ob3RoaW5nKCksXG4gICAgICBjc3NQYXJzZXIgPSBDU1NQYXJzZXIuZnJvbU5vdGhpbmcoKTtcblxuY29uc3Qgc3R5bGVNYXAgPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlclN0eWxlcygpIHtcbiAgY29uc3Qgc3R5bGVzQ1NTID0gcmV0cmlldmVTdHlsZXNDU1MoKSxcbiAgICAgICAgaW5uZXJIVE1MID0gYFxuICAgICAgICBcbiR7c3R5bGVzQ1NTfWAsXG4gICAgICBoZWFkRE9NRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQnKSxcbiAgICAgIHN0eWxlRE9NRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG5cbiAgT2JqZWN0LmFzc2lnbihzdHlsZURPTUVsZW1lbnQsIHtcbiAgICBpbm5lckhUTUxcbiAgfSk7XG5cbiAgaGVhZERPTUVsZW1lbnQuYXBwZW5kQ2hpbGQoc3R5bGVET01FbGVtZW50KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlU3R5bGUoYXJncywgY2xhc3NOYW1lLCBzdXBlclN0eWxlID0gbnVsbCkge1xuICBjb25zdCBzdHJpbmdzID0gYXJncy5zaGlmdCgpLFx0Ly8vXG4gICAgICAgIGNvbnRlbnQgPSBzdHJpbmdzLnJlZHVjZSgoY29udGVudCwgc3RyaW5nLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGFyZyA9IGFyZ3NbaW5kZXhdO1xuXG4gICAgICAgICAgY29udGVudCA9IChhcmcgIT09IHVuZGVmaW5lZCkgP1xuICAgICAgICAgICAgICAgICAgICAgIGAke2NvbnRlbnR9JHtzdHJpbmd9JHthcmd9YCA6XG4gICAgICAgICAgICAgICAgICAgICAgICBgJHtjb250ZW50fSR7c3RyaW5nfWA7XG5cbiAgICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgICAgfSwgJycpLFxuICAgICAgICB0b2tlbnMgPSBjc3NMZXhlci50b2tlbmlzZShjb250ZW50KSxcbiAgICAgICAgbm9kZSA9IGNzc1BhcnNlci5wYXJzZSh0b2tlbnMpLFxuICAgICAgICBzdHlsZSA9IFN0eWxlLmZyb21Ob2RlQW5kVG9rZW5zKG5vZGUsIHRva2Vucyk7XG5cbiAgICAgICAgaWYgKHN1cGVyU3R5bGUgIT09IG51bGwpIHtcbiAgICAgICAgICBzdHlsZS5leHRlbmRzKHN1cGVyU3R5bGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3R5bGVNYXBbY2xhc3NOYW1lXSA9IHN0eWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmV0cmlldmVTdHlsZShjbGFzc05hbWUpIHtcbiAgY29uc3Qgc3R5bGUgPSBzdHlsZU1hcFtjbGFzc05hbWVdIHx8IG51bGw7XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHJlbmRlclN0eWxlcyxcbiAgZ2VuZXJhdGVTdHlsZSxcbiAgcmV0cmlldmVTdHlsZVxufTtcblxuZnVuY3Rpb24gcmV0cmlldmVTdHlsZXNDU1MoKSB7XG4gIGNvbnN0IGNsYXNzTmFtZXMgPSBPYmplY3Qua2V5cyhzdHlsZU1hcCksXG4gICAgICAgIHN0eWxlc0NTUyA9IGNsYXNzTmFtZXMucmVkdWNlKChzdHlsZXNDU1MsIGNsYXNzTmFtZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHN0eWxlID0gcmV0cmlldmVTdHlsZShjbGFzc05hbWUpLFxuICAgICAgICAgICAgICAgIHN0eWxlQ1NTID0gc3R5bGUuYXNDU1MoY2xhc3NOYW1lKTtcblxuICAgICAgICAgIHN0eWxlc0NTUyArPSBzdHlsZUNTUztcblxuICAgICAgICAgIHJldHVybiBzdHlsZXNDU1M7XG4gICAgICAgIH0sICcnKTtcblxuICByZXR1cm4gc3R5bGVzQ1NTO1xufVxuIl19