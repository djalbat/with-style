"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _style = _interopRequireDefault(require("../style"));

var _lexer = _interopRequireDefault(require("../css/lexer"));

var _parser = _interopRequireDefault(require("../css/parser"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var cssLexer = _lexer["default"].fromNothing(),
    cssParser = _parser["default"].fromNothing();

var styleMap;

if (typeof window === "undefined") {
  styleMap = {};
} else {
  var _window = window;
  styleMap = _window.styleMap;

  ///
  if (styleMap === undefined) {
    styleMap = {};
  }

  Object.assign(window, {
    styleMap: styleMap
  });
}

function renderStyle(style) {
  var headDOMElement = document.querySelector("head"),
      styleDOMElement = document.createElement("style"),
      innerHTML = "\n        \n".concat(style);
  Object.assign(styleDOMElement, {
    innerHTML: innerHTML
  });
  headDOMElement.appendChild(styleDOMElement);
}

function renderStyles() {
  var stylesCSS = retrieveStylesCSS(),
      style = stylesCSS; ///

  renderStyle(style);
}

function generateStyle(args, className) {
  var superStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  var strings = args.shift(),
      ///
  content = strings.reduce(function (content, string, index) {
    var arg = args[index];
    content = arg !== undefined ? "".concat(content).concat(string).concat(arg) : "".concat(content).concat(string);
    return content;
  }, ""),
      tokens = cssLexer.tokenise(content),
      node = cssParser.parse(tokens),
      style = _style["default"].fromNodeAndTokens(node, tokens);

  if (superStyle !== null) {
    style["extends"](superStyle);
  }

  styleMap[className] = style;
}

function retrieveStyle(className) {
  var style = styleMap[className] || null;
  return style;
}

var _default = {
  renderStyle: renderStyle,
  renderStyles: renderStyles,
  generateStyle: generateStyle,
  retrieveStyle: retrieveStyle
};
exports["default"] = _default;

function retrieveStylesCSS() {
  var classNames = Object.keys(styleMap),
      stylesCSS = classNames.reduce(function (stylesCSS, className) {
    var style = retrieveStyle(className),
        styleCSS = style.asCSS(className);
    stylesCSS += styleCSS;
    return stylesCSS;
  }, "");
  return stylesCSS;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlcy5qcyJdLCJuYW1lcyI6WyJjc3NMZXhlciIsIkNTU0xleGVyIiwiZnJvbU5vdGhpbmciLCJjc3NQYXJzZXIiLCJDU1NQYXJzZXIiLCJzdHlsZU1hcCIsIndpbmRvdyIsInVuZGVmaW5lZCIsIk9iamVjdCIsImFzc2lnbiIsInJlbmRlclN0eWxlIiwic3R5bGUiLCJoZWFkRE9NRWxlbWVudCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInN0eWxlRE9NRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJhcHBlbmRDaGlsZCIsInJlbmRlclN0eWxlcyIsInN0eWxlc0NTUyIsInJldHJpZXZlU3R5bGVzQ1NTIiwiZ2VuZXJhdGVTdHlsZSIsImFyZ3MiLCJjbGFzc05hbWUiLCJzdXBlclN0eWxlIiwic3RyaW5ncyIsInNoaWZ0IiwiY29udGVudCIsInJlZHVjZSIsInN0cmluZyIsImluZGV4IiwiYXJnIiwidG9rZW5zIiwidG9rZW5pc2UiLCJub2RlIiwicGFyc2UiLCJTdHlsZSIsImZyb21Ob2RlQW5kVG9rZW5zIiwicmV0cmlldmVTdHlsZSIsImNsYXNzTmFtZXMiLCJrZXlzIiwic3R5bGVDU1MiLCJhc0NTUyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7OztBQUVBLElBQU1BLFFBQVEsR0FBR0Msa0JBQVNDLFdBQVQsRUFBakI7QUFBQSxJQUNNQyxTQUFTLEdBQUdDLG1CQUFVRixXQUFWLEVBRGxCOztBQUdBLElBQUlHLFFBQUo7O0FBRUEsSUFBSSxPQUFPQyxNQUFQLEtBQWtCLFdBQXRCLEVBQW1DO0FBQ2pDRCxFQUFBQSxRQUFRLEdBQUcsRUFBWDtBQUNELENBRkQsTUFFTztBQUFBLGdCQUNXQyxNQURYO0FBQ0ZELEVBQUFBLFFBREUsV0FDRkEsUUFERTs7QUFDcUI7QUFFMUIsTUFBSUEsUUFBUSxLQUFLRSxTQUFqQixFQUE0QjtBQUMxQkYsSUFBQUEsUUFBUSxHQUFHLEVBQVg7QUFDRDs7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UDtBQUNELEdBUFcsRUFPVCxFQVBTLENBRGxCO0FBVUEsU0FBT0EsU0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBTdHlsZSBmcm9tIFwiLi4vc3R5bGVcIjtcbmltcG9ydCBDU1NMZXhlciBmcm9tIFwiLi4vY3NzL2xleGVyXCI7XG5pbXBvcnQgQ1NTUGFyc2VyIGZyb20gXCIuLi9jc3MvcGFyc2VyXCI7XG5cbmNvbnN0IGNzc0xleGVyID0gQ1NTTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIGNzc1BhcnNlciA9IENTU1BhcnNlci5mcm9tTm90aGluZygpO1xuXG5sZXQgc3R5bGVNYXA7XG5cbmlmICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIHN0eWxlTWFwID0ge31cbn0gZWxzZSB7XG4gICh7IHN0eWxlTWFwIH0gPSB3aW5kb3cpOyAgLy8vXG5cbiAgaWYgKHN0eWxlTWFwID09PSB1bmRlZmluZWQpIHtcbiAgICBzdHlsZU1hcCA9IHt9O1xuICB9XG5cbiAgT2JqZWN0LmFzc2lnbih3aW5kb3csIHtcbiAgICBzdHlsZU1hcFxuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVuZGVyU3R5bGUoc3R5bGUpIHtcbiAgY29uc3QgaGVhZERPTUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaGVhZFwiKSxcbiAgICAgICAgc3R5bGVET01FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpLFxuICAgICAgICBpbm5lckhUTUwgPSBgXG4gICAgICAgIFxuJHtzdHlsZX1gO1xuXG4gIE9iamVjdC5hc3NpZ24oc3R5bGVET01FbGVtZW50LCB7XG4gICAgaW5uZXJIVE1MXG4gIH0pO1xuXG4gIGhlYWRET01FbGVtZW50LmFwcGVuZENoaWxkKHN0eWxlRE9NRWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIHJlbmRlclN0eWxlcygpIHtcbiAgY29uc3Qgc3R5bGVzQ1NTID0gcmV0cmlldmVTdHlsZXNDU1MoKSxcbiAgICAgICAgc3R5bGUgPSBzdHlsZXNDU1M7ICAvLy9cblxuICByZW5kZXJTdHlsZShzdHlsZSk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlU3R5bGUoYXJncywgY2xhc3NOYW1lLCBzdXBlclN0eWxlID0gbnVsbCkge1xuICBjb25zdCBzdHJpbmdzID0gYXJncy5zaGlmdCgpLFx0Ly8vXG4gICAgICAgIGNvbnRlbnQgPSBzdHJpbmdzLnJlZHVjZSgoY29udGVudCwgc3RyaW5nLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGFyZyA9IGFyZ3NbaW5kZXhdO1xuXG4gICAgICAgICAgY29udGVudCA9IChhcmcgIT09IHVuZGVmaW5lZCkgP1xuICAgICAgICAgICAgICAgICAgICAgIGAke2NvbnRlbnR9JHtzdHJpbmd9JHthcmd9YCA6XG4gICAgICAgICAgICAgICAgICAgICAgICBgJHtjb250ZW50fSR7c3RyaW5nfWA7XG5cbiAgICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgICAgfSwgXCJcIiksXG4gICAgICAgIHRva2VucyA9IGNzc0xleGVyLnRva2VuaXNlKGNvbnRlbnQpLFxuICAgICAgICBub2RlID0gY3NzUGFyc2VyLnBhcnNlKHRva2VucyksXG4gICAgICAgIHN0eWxlID0gU3R5bGUuZnJvbU5vZGVBbmRUb2tlbnMobm9kZSwgdG9rZW5zKTtcblxuICAgICAgICBpZiAoc3VwZXJTdHlsZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHN0eWxlLmV4dGVuZHMoc3VwZXJTdHlsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdHlsZU1hcFtjbGFzc05hbWVdID0gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJldHJpZXZlU3R5bGUoY2xhc3NOYW1lKSB7XG4gIGNvbnN0IHN0eWxlID0gc3R5bGVNYXBbY2xhc3NOYW1lXSB8fCBudWxsO1xuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICByZW5kZXJTdHlsZSxcbiAgcmVuZGVyU3R5bGVzLFxuICBnZW5lcmF0ZVN0eWxlLFxuICByZXRyaWV2ZVN0eWxlXG59O1xuXG5mdW5jdGlvbiByZXRyaWV2ZVN0eWxlc0NTUygpIHtcbiAgY29uc3QgY2xhc3NOYW1lcyA9IE9iamVjdC5rZXlzKHN0eWxlTWFwKSxcbiAgICAgICAgc3R5bGVzQ1NTID0gY2xhc3NOYW1lcy5yZWR1Y2UoKHN0eWxlc0NTUywgY2xhc3NOYW1lKSA9PiB7XG4gICAgICAgICAgY29uc3Qgc3R5bGUgPSByZXRyaWV2ZVN0eWxlKGNsYXNzTmFtZSksXG4gICAgICAgICAgICAgICAgc3R5bGVDU1MgPSBzdHlsZS5hc0NTUyhjbGFzc05hbWUpO1xuXG4gICAgICAgICAgc3R5bGVzQ1NTICs9IHN0eWxlQ1NTO1xuXG4gICAgICAgICAgcmV0dXJuIHN0eWxlc0NTUztcbiAgICAgICAgfSwgXCJcIik7XG5cbiAgcmV0dXJuIHN0eWxlc0NTUztcbn1cbiJdfQ==