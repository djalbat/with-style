"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _style = _interopRequireDefault(require("../style"));
var _lexer = _interopRequireDefault(require("../css/lexer"));
var _parser = _interopRequireDefault(require("../css/parser"));
var _constants = require("../constants");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var cssLexer = _lexer.default.fromNothing(), cssParser = _parser.default.fromNothing();
if (!globalThis.styleMap) {
    globalThis.styleMap = {};
}
var styleMap = globalThis.styleMap;
function renderStyle(style) {
    var headDOMElement = document.querySelector(_constants.HEAD), styleDOMElement = document.createElement(_constants.STYLE), innerHTML = "        \n".concat(style, "\n");
    Object.assign(styleDOMElement, {
        innerHTML: innerHTML
    });
    headDOMElement.appendChild(styleDOMElement);
    return styleDOMElement;
}
function renderStyles() {
    var stylesCSS = retrieveStylesCSS(), style = stylesCSS; ///
    renderStyle(style);
}
function generateStyle(args, className) {
    var superStyle = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
    var strings = args.shift(), content1 = strings.reduce(function(content, string, index) {
        var arg = args[index] || null;
        content = arg === null ? "".concat(content).concat(string) : "".concat(content).concat(string).concat(arg);
        return content;
    }, _constants.EMPTY_STRING), tokens = cssLexer.tokenise(content1), node = cssParser.parse(tokens), style = _style.default.fromNodeAndTokens(node, tokens);
    if (superStyle !== null) {
        style.extends(superStyle);
    }
    styleMap[className] = style;
}
function retrieveStyle(className) {
    var style = styleMap[className] || null;
    return style;
}
var _default = {
    renderStyle: renderStyle,
    renderStyles: renderStyles,
    generateStyle: generateStyle,
    retrieveStyle: retrieveStyle
};
exports.default = _default;
function retrieveStylesCSS() {
    var classNames = Object.keys(styleMap), stylesCSS1 = classNames.reduce(function(stylesCSS, className) {
        var style = retrieveStyle(className), styleCSS = style.asCSS(className);
        stylesCSS += styleCSS;
        return stylesCSS;
    }, _constants.EMPTY_STRING);
    return stylesCSS1;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvc3R5bGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgU3R5bGUgZnJvbSBcIi4uL3N0eWxlXCI7XG5pbXBvcnQgQ1NTTGV4ZXIgZnJvbSBcIi4uL2Nzcy9sZXhlclwiO1xuaW1wb3J0IENTU1BhcnNlciBmcm9tIFwiLi4vY3NzL3BhcnNlclwiO1xuXG5pbXBvcnQgeyBIRUFELCBTVFlMRSwgRU1QVFlfU1RSSU5HIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuXG5jb25zdCBjc3NMZXhlciA9IENTU0xleGVyLmZyb21Ob3RoaW5nKCksXG4gICAgICBjc3NQYXJzZXIgPSBDU1NQYXJzZXIuZnJvbU5vdGhpbmcoKTtcblxuaWYgKCFnbG9iYWxUaGlzLnN0eWxlTWFwKSB7XG4gIGdsb2JhbFRoaXMuc3R5bGVNYXAgPSB7fTtcbn1cblxuY29uc3QgeyBzdHlsZU1hcCB9ID0gZ2xvYmFsVGhpcztcblxuZnVuY3Rpb24gcmVuZGVyU3R5bGUoc3R5bGUpIHtcbiAgY29uc3QgaGVhZERPTUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKEhFQUQpLFxuICAgICAgICBzdHlsZURPTUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFNUWUxFKSxcbiAgICAgICAgaW5uZXJIVE1MID0gYCAgICAgICAgXG4ke3N0eWxlfVxuYDtcblxuICBPYmplY3QuYXNzaWduKHN0eWxlRE9NRWxlbWVudCwge1xuICAgIGlubmVySFRNTFxuICB9KTtcblxuICBoZWFkRE9NRWxlbWVudC5hcHBlbmRDaGlsZChzdHlsZURPTUVsZW1lbnQpO1xuXG4gIHJldHVybiBzdHlsZURPTUVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIHJlbmRlclN0eWxlcygpIHtcbiAgY29uc3Qgc3R5bGVzQ1NTID0gcmV0cmlldmVTdHlsZXNDU1MoKSxcbiAgICAgICAgc3R5bGUgPSBzdHlsZXNDU1M7ICAvLy9cblxuICByZW5kZXJTdHlsZShzdHlsZSk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlU3R5bGUoYXJncywgY2xhc3NOYW1lLCBzdXBlclN0eWxlID0gbnVsbCkge1xuICBjb25zdCBzdHJpbmdzID0gYXJncy5zaGlmdCgpLFx0Ly8vXG4gICAgICAgIGNvbnRlbnQgPSBzdHJpbmdzLnJlZHVjZSgoY29udGVudCwgc3RyaW5nLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGFyZyA9IGFyZ3NbaW5kZXhdIHx8IG51bGw7XG5cbiAgICAgICAgICBjb250ZW50ID0gKGFyZyA9PT0gbnVsbCkgP1xuICAgICAgICAgICAgICAgICAgICAgIGAke2NvbnRlbnR9JHtzdHJpbmd9YCA6XG4gICAgICAgICAgICAgICAgICAgICAgICBgJHtjb250ZW50fSR7c3RyaW5nfSR7YXJnfWA7XG5cbiAgICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgICAgfSwgRU1QVFlfU1RSSU5HKSxcbiAgICAgICAgdG9rZW5zID0gY3NzTGV4ZXIudG9rZW5pc2UoY29udGVudCksXG4gICAgICAgIG5vZGUgPSBjc3NQYXJzZXIucGFyc2UodG9rZW5zKSxcbiAgICAgICAgc3R5bGUgPSBTdHlsZS5mcm9tTm9kZUFuZFRva2Vucyhub2RlLCB0b2tlbnMpO1xuXG4gIGlmIChzdXBlclN0eWxlICE9PSBudWxsKSB7XG4gICAgc3R5bGUuZXh0ZW5kcyhzdXBlclN0eWxlKTtcbiAgfVxuXG4gIHN0eWxlTWFwW2NsYXNzTmFtZV0gPSBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmV0cmlldmVTdHlsZShjbGFzc05hbWUpIHtcbiAgY29uc3Qgc3R5bGUgPSBzdHlsZU1hcFtjbGFzc05hbWVdIHx8IG51bGw7XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHJlbmRlclN0eWxlLFxuICByZW5kZXJTdHlsZXMsXG4gIGdlbmVyYXRlU3R5bGUsXG4gIHJldHJpZXZlU3R5bGVcbn07XG5cbmZ1bmN0aW9uIHJldHJpZXZlU3R5bGVzQ1NTKCkge1xuICBjb25zdCBjbGFzc05hbWVzID0gT2JqZWN0LmtleXMoc3R5bGVNYXApLFxuICAgICAgICBzdHlsZXNDU1MgPSBjbGFzc05hbWVzLnJlZHVjZSgoc3R5bGVzQ1NTLCBjbGFzc05hbWUpID0+IHtcbiAgICAgICAgICBjb25zdCBzdHlsZSA9IHJldHJpZXZlU3R5bGUoY2xhc3NOYW1lKSxcbiAgICAgICAgICAgICAgICBzdHlsZUNTUyA9IHN0eWxlLmFzQ1NTKGNsYXNzTmFtZSk7XG5cbiAgICAgICAgICBzdHlsZXNDU1MgKz0gc3R5bGVDU1M7XG5cbiAgICAgICAgICByZXR1cm4gc3R5bGVzQ1NTO1xuICAgICAgICB9LCBFTVBUWV9TVFJJTkcpO1xuXG4gIHJldHVybiBzdHlsZXNDU1M7XG59XG4iXSwibmFtZXMiOlsiY3NzTGV4ZXIiLCJDU1NMZXhlciIsImZyb21Ob3RoaW5nIiwiY3NzUGFyc2VyIiwiQ1NTUGFyc2VyIiwiZ2xvYmFsVGhpcyIsInN0eWxlTWFwIiwicmVuZGVyU3R5bGUiLCJzdHlsZSIsImhlYWRET01FbGVtZW50IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiSEVBRCIsInN0eWxlRE9NRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJTVFlMRSIsImlubmVySFRNTCIsIk9iamVjdCIsImFzc2lnbiIsImFwcGVuZENoaWxkIiwicmVuZGVyU3R5bGVzIiwic3R5bGVzQ1NTIiwicmV0cmlldmVTdHlsZXNDU1MiLCJnZW5lcmF0ZVN0eWxlIiwiYXJncyIsImNsYXNzTmFtZSIsInN1cGVyU3R5bGUiLCJzdHJpbmdzIiwic2hpZnQiLCJjb250ZW50IiwicmVkdWNlIiwic3RyaW5nIiwiaW5kZXgiLCJhcmciLCJFTVBUWV9TVFJJTkciLCJ0b2tlbnMiLCJ0b2tlbmlzZSIsIm5vZGUiLCJwYXJzZSIsIlN0eWxlIiwiZnJvbU5vZGVBbmRUb2tlbnMiLCJleHRlbmRzIiwicmV0cmlldmVTdHlsZSIsImNsYXNzTmFtZXMiLCJrZXlzIiwic3R5bGVDU1MiLCJhc0NT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