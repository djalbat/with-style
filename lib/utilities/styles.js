"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _style = _interopRequireDefault(require("../style"));
var _lexer = _interopRequireDefault(require("../css/lexer"));
var _parser = _interopRequireDefault(require("../css/parser"));
var _constants = require("../constants");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var cssLexer = _lexer.default.fromNothing(), cssParser = _parser.default.fromNothing();
if (!globalThis.styleMap) {
    globalThis.styleMap = {
    };
}
var styleMap = globalThis.styleMap;
function renderStyle(style) {
    var headDOMElement = document.querySelector(_constants.HEAD), styleDOMElement = document.createElement(_constants.STYLE), innerHTML = "\n        \n".concat(style);
    Object.assign(styleDOMElement, {
        innerHTML: innerHTML
    });
    headDOMElement.appendChild(styleDOMElement);
}
function renderStyles() {
    var stylesCSS = retrieveStylesCSS(), style = stylesCSS; ///
    renderStyle(style);
}
function generateStyle(args, className, param) {
    var superStyle = param === void 0 ? null : param;
    var strings = args.shift(), content = strings.reduce(function(content1, string, index) {
        var arg = args[index];
        content1 = arg !== undefined ? "".concat(content1).concat(string).concat(arg) : "".concat(content1).concat(string);
        return content1;
    }, _constants.EMPTY_STRING), tokens = cssLexer.tokenise(content), node = cssParser.parse(tokens), style = _style.default.fromNodeAndTokens(node, tokens);
    if (superStyle !== null) {
        style.extends(superStyle);
    }
    styleMap[className] = style;
}
function retrieveStyle(className) {
    var style = styleMap[className] || null;
    return style;
}
var _default = {
    renderStyle: renderStyle,
    renderStyles: renderStyles,
    generateStyle: generateStyle,
    retrieveStyle: retrieveStyle
};
exports.default = _default;
function retrieveStylesCSS() {
    var classNames = Object.keys(styleMap), stylesCSS = classNames.reduce(function(stylesCSS1, className) {
        var style = retrieveStyle(className), styleCSS = style.asCSS(className);
        stylesCSS1 += styleCSS;
        return stylesCSS1;
    }, _constants.EMPTY_STRING);
    return stylesCSS;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvc3R5bGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgU3R5bGUgZnJvbSBcIi4uL3N0eWxlXCI7XG5pbXBvcnQgQ1NTTGV4ZXIgZnJvbSBcIi4uL2Nzcy9sZXhlclwiO1xuaW1wb3J0IENTU1BhcnNlciBmcm9tIFwiLi4vY3NzL3BhcnNlclwiO1xuXG5pbXBvcnQgeyBIRUFELCBTVFlMRSwgRU1QVFlfU1RSSU5HIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuXG5jb25zdCBjc3NMZXhlciA9IENTU0xleGVyLmZyb21Ob3RoaW5nKCksXG4gICAgICBjc3NQYXJzZXIgPSBDU1NQYXJzZXIuZnJvbU5vdGhpbmcoKTtcblxuaWYgKCFnbG9iYWxUaGlzLnN0eWxlTWFwKSB7XG4gIGdsb2JhbFRoaXMuc3R5bGVNYXAgPSB7fTtcbn1cblxuY29uc3QgeyBzdHlsZU1hcCB9ID0gZ2xvYmFsVGhpcztcblxuZnVuY3Rpb24gcmVuZGVyU3R5bGUoc3R5bGUpIHtcbiAgY29uc3QgaGVhZERPTUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKEhFQUQpLFxuICAgICAgICBzdHlsZURPTUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFNUWUxFKSxcbiAgICAgICAgaW5uZXJIVE1MID0gYFxuICAgICAgICBcbiR7c3R5bGV9YDtcblxuICBPYmplY3QuYXNzaWduKHN0eWxlRE9NRWxlbWVudCwge1xuICAgIGlubmVySFRNTFxuICB9KTtcblxuICBoZWFkRE9NRWxlbWVudC5hcHBlbmRDaGlsZChzdHlsZURPTUVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiByZW5kZXJTdHlsZXMoKSB7XG4gIGNvbnN0IHN0eWxlc0NTUyA9IHJldHJpZXZlU3R5bGVzQ1NTKCksXG4gICAgICAgIHN0eWxlID0gc3R5bGVzQ1NTOyAgLy8vXG5cbiAgcmVuZGVyU3R5bGUoc3R5bGUpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVN0eWxlKGFyZ3MsIGNsYXNzTmFtZSwgc3VwZXJTdHlsZSA9IG51bGwpIHtcbiAgY29uc3Qgc3RyaW5ncyA9IGFyZ3Muc2hpZnQoKSxcdC8vL1xuICAgICAgICBjb250ZW50ID0gc3RyaW5ncy5yZWR1Y2UoKGNvbnRlbnQsIHN0cmluZywgaW5kZXgpID0+IHtcbiAgICAgICAgICBjb25zdCBhcmcgPSBhcmdzW2luZGV4XTtcblxuICAgICAgICAgIGNvbnRlbnQgPSAoYXJnICE9PSB1bmRlZmluZWQpID9cbiAgICAgICAgICAgICAgICAgICAgICBgJHtjb250ZW50fSR7c3RyaW5nfSR7YXJnfWAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgYCR7Y29udGVudH0ke3N0cmluZ31gO1xuXG4gICAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICAgIH0sIEVNUFRZX1NUUklORyksXG4gICAgICAgIHRva2VucyA9IGNzc0xleGVyLnRva2VuaXNlKGNvbnRlbnQpLFxuICAgICAgICBub2RlID0gY3NzUGFyc2VyLnBhcnNlKHRva2VucyksXG4gICAgICAgIHN0eWxlID0gU3R5bGUuZnJvbU5vZGVBbmRUb2tlbnMobm9kZSwgdG9rZW5zKTtcblxuICAgICAgICBpZiAoc3VwZXJTdHlsZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHN0eWxlLmV4dGVuZHMoc3VwZXJTdHlsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdHlsZU1hcFtjbGFzc05hbWVdID0gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJldHJpZXZlU3R5bGUoY2xhc3NOYW1lKSB7XG4gIGNvbnN0IHN0eWxlID0gc3R5bGVNYXBbY2xhc3NOYW1lXSB8fCBudWxsO1xuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICByZW5kZXJTdHlsZSxcbiAgcmVuZGVyU3R5bGVzLFxuICBnZW5lcmF0ZVN0eWxlLFxuICByZXRyaWV2ZVN0eWxlXG59O1xuXG5mdW5jdGlvbiByZXRyaWV2ZVN0eWxlc0NTUygpIHtcbiAgY29uc3QgY2xhc3NOYW1lcyA9IE9iamVjdC5rZXlzKHN0eWxlTWFwKSxcbiAgICAgICAgc3R5bGVzQ1NTID0gY2xhc3NOYW1lcy5yZWR1Y2UoKHN0eWxlc0NTUywgY2xhc3NOYW1lKSA9PiB7XG4gICAgICAgICAgY29uc3Qgc3R5bGUgPSByZXRyaWV2ZVN0eWxlKGNsYXNzTmFtZSksXG4gICAgICAgICAgICAgICAgc3R5bGVDU1MgPSBzdHlsZS5hc0NTUyhjbGFzc05hbWUpO1xuXG4gICAgICAgICAgc3R5bGVzQ1NTICs9IHN0eWxlQ1NTO1xuXG4gICAgICAgICAgcmV0dXJuIHN0eWxlc0NTUztcbiAgICAgICAgfSwgRU1QVFlfU1RSSU5HKTtcblxuICByZXR1cm4gc3R5bGVzQ1NTO1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJDQUFBLFVBQVk7Ozs7O0FBRU0sR0FBVSxDQUFWLE1BQVU7QUFDUCxHQUFjLENBQWQsTUFBYztBQUNiLEdBQWUsQ0FBZixPQUFlO0FBRUssR0FBYyxDQUFkLFVBQWM7Ozs7OztBQUV4RCxHQUFLLENBQUMsUUFBUSxHQUxPLE1BQWMsU0FLVCxXQUFXLElBQy9CLFNBQVMsR0FMTyxPQUFlLFNBS1QsV0FBVztBQUV2QyxFQUFFLEdBQUcsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3pCLFVBQVUsQ0FBQyxRQUFROztBQUNyQixDQUFDO0FBRUQsR0FBSyxDQUFHLFFBQVEsR0FBSyxVQUFVLENBQXZCLFFBQVE7U0FFUCxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDM0IsR0FBSyxDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQVpMLFVBQWMsUUFhaEQsZUFBZSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBYk4sVUFBYyxTQWNoRCxTQUFTLElBQUksWUFFckIsRUFBUSxNQUFBLENBQU4sS0FBSztJQUVMLE1BQU0sQ0FBQyxNQUFNLENBQUMsZUFBZTtRQUMzQixTQUFTLEVBQVQsU0FBUzs7SUFHWCxjQUFjLENBQUMsV0FBVyxDQUFDLGVBQWU7QUFDNUMsQ0FBQztTQUVRLFlBQVksR0FBRyxDQUFDO0lBQ3ZCLEdBQUssQ0FBQyxTQUFTLEdBQUcsaUJBQWlCLElBQzdCLEtBQUssR0FBRyxTQUFTLENBQUcsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO0lBRTdCLFdBQVcsQ0FBQyxLQUFLO0FBQ25CLENBQUM7U0FFUSxhQUFhLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxLQUFpQixFQUFFLENBQUM7UUFBcEIsVUFBVSxHQUFWLEtBQWlCLGNBQUosSUFBSSxHQUFqQixLQUFpQjtJQUN2RCxHQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQ3BCLE9BQU8sR0FBRyxPQUFPLENBQUMsTUFBTSxVQUFFLFFBQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFLLENBQUM7UUFDcEQsR0FBSyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSztRQUV0QixRQUFPLEdBQUksR0FBRyxLQUFLLFNBQVMsTUFDSCxNQUFNLENBQWhCLFFBQU8sRUFBWSxNQUFHLENBQVosTUFBTSxFQUFPLE1BQUEsQ0FBSixHQUFHLE9BQ1YsTUFBTSxDQUFoQixRQUFPLEVBQVUsTUFBQSxDQUFQLE1BQU07ZUFFMUIsUUFBTztJQUNoQixDQUFDLEVBMUNpQyxVQUFjLGdCQTJDaEQsTUFBTSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUNsQyxJQUFJLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQzdCLEtBQUssR0FqREssTUFBVSxTQWlETixpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsTUFBTTtJQUU1QyxFQUFFLEVBQUUsVUFBVSxLQUFLLElBQUksRUFBRSxDQUFDO1FBQ3hCLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVTtJQUMxQixDQUFDO0lBRUQsUUFBUSxDQUFDLFNBQVMsSUFBSSxLQUFLO0FBQ25DLENBQUM7U0FFUSxhQUFhLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDakMsR0FBSyxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsU0FBUyxLQUFLLElBQUk7V0FFbEMsS0FBSztBQUNkLENBQUM7O0lBR0MsV0FBVyxFQUFYLFdBQVc7SUFDWCxZQUFZLEVBQVosWUFBWTtJQUNaLGFBQWEsRUFBYixhQUFhO0lBQ2IsYUFBYSxFQUFiLGFBQWE7OztTQUdOLGlCQUFpQixHQUFHLENBQUM7SUFDNUIsR0FBSyxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FDakMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxNQUFNLFVBQUUsVUFBUyxFQUFFLFNBQVMsRUFBSyxDQUFDO1FBQ3ZELEdBQUssQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFDLFNBQVMsR0FDL0IsUUFBUSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUztRQUV0QyxVQUFTLElBQUksUUFBUTtlQUVkLFVBQVM7SUFDbEIsQ0FBQyxFQTVFaUMsVUFBYztXQThFL0MsU0FBUztBQUNsQixDQUFDIn0=