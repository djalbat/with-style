'use strict';

var Style = require('../style'),
    CSSLexer = require('../css/lexer'),
    CSSParser = require('../css/parser');

var cssLexer = CSSLexer.fromNothing(),
    cssParser = CSSParser.fromNothing();
var styleMap = {};

function renderStyles() {
  var stylesCSS = retrieveStylesCSS(),
      innerHTML = "\n        \n".concat(stylesCSS),
      headDOMElement = document.querySelector('head'),
      styleDOMElement = document.createElement('style');
  Object.assign(styleDOMElement, {
    innerHTML: innerHTML
  });
  headDOMElement.appendChild(styleDOMElement);
}

function generateStyle(args, className) {
  var superStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var strings = args.shift(),
      ///
  content = strings.reduce(function (content, string, index) {
    var arg = args[index];
    content = arg !== undefined ? "".concat(content).concat(string).concat(arg) : "".concat(content).concat(string);
    return content;
  }, ''),
      tokens = cssLexer.tokenise(content),
      node = cssParser.parse(tokens),
      style = Style.fromNodeAndTokens(node, tokens);

  if (superStyle !== null) {
    style["extends"](superStyle);
  }

  styleMap[className] = style;
}

function retrieveStyle(className) {
  var style = styleMap[className] || null;
  return style;
}

module.exports = {
  renderStyles: renderStyles,
  generateStyle: generateStyle,
  retrieveStyle: retrieveStyle
};

function retrieveStylesCSS() {
  var classNames = Object.keys(styleMap),
      stylesCSS = classNames.reduce(function (stylesCSS, className) {
    var style = retrieveStyle(className),
        styleCSS = style.asCSS(className);
    stylesCSS += styleCSS;
    return stylesCSS;
  }, '');
  return stylesCSS;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlcy5qcyJdLCJuYW1lcyI6WyJTdHlsZSIsInJlcXVpcmUiLCJDU1NMZXhlciIsIkNTU1BhcnNlciIsImNzc0xleGVyIiwiZnJvbU5vdGhpbmciLCJjc3NQYXJzZXIiLCJzdHlsZU1hcCIsInJlbmRlclN0eWxlcyIsInN0eWxlc0NTUyIsInJldHJpZXZlU3R5bGVzQ1NTIiwiaW5uZXJIVE1MIiwiaGVhZERPTUVsZW1lbnQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJzdHlsZURPTUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiT2JqZWN0IiwiYXNzaWduIiwiYXBwZW5kQ2hpbGQiLCJnZW5lcmF0ZVN0eWxlIiwiYXJncyIsImNsYXNzTmFtZSIsInN1cGVyU3R5bGUiLCJzdHJpbmdzIiwic2hpZnQiLCJjb250ZW50IiwicmVkdWNlIiwic3RyaW5nIiwiaW5kZXgiLCJhcmciLCJ1bmRlZmluZWQiLCJ0b2tlbnMiLCJ0b2tlbmlzZSIsIm5vZGUiLCJwYXJzZSIsInN0eWxlIiwiZnJvbU5vZGVBbmRUb2tlbnMiLCJyZXRyaWV2ZVN0eWxlIiwibW9kdWxlIiwiZXhwb3J0cyIsImNsYXNzTmFtZXMiLCJrZXlzIiwic3R5bGVDU1MiLCJhc0NTUyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUFyQjtBQUFBLElBQ01DLFFBQVEsR0FBR0QsT0FBTyxDQUFDLGNBQUQsQ0FEeEI7QUFBQSxJQUVNRSxTQUFTLEdBQUdGLE9BQU8sQ0FBQyxlQUFELENBRnpCOztBQUlBLElBQU1HLFFBQVEsR0FBR0YsUUFBUSxDQUFDRyxXQUFULEVBQWpCO0FBQUEsSUFDTUMsU0FBUyxHQUFHSCxTQUFTLENBQUNFLFdBQVYsRUFEbEI7QUFHQSxJQUFNRSxRQUFRLEdBQUcsRUFBakI7O0FBRUEsU0FBU0MsWUFBVCxHQUF3QjtBQUN0QixNQUFNQyxTQUFTLEdBQUdDLGlCQUFpQixFQUFuQztBQUFBLE1BQ01DLFNBQVMseUJBRWZGLFNBRmUsQ0FEZjtBQUFBLE1BSUlHLGNBQWMsR0FBR0MsUUFBUSxDQUFDQyxhQUFULENBQXVCLE1BQXZCLENBSnJCO0FBQUEsTUFLSUMsZUFBZSxHQUFHRixRQUFRLENBQUNHLGFBQVQsQ0FBdUIsT0FBdkIsQ0FMdEI7QUFPQUMsRUFBQUEsTUFBTSxDQUFDQyxNQUFQLENBQWNILGVBQWQsRUFBK0I7QUFDN0JKLElBQUFBLFNBQVMsRUFBVEE7QUFENkIsR0FBL0I7QUFJQUMsRUFBQUEsY0FBYyxDQUFDTyxXQUFmLENBQTJCSixlQUEzQjtBQUNEOztBQUVELFNBQVNLLGFBQVQsQ0FBdUJDLElBQXZCLEVBQTZCQyxTQUE3QixFQUEyRDtBQUFBLE1BQW5CQyxVQUFtQix1RUFBTixJQUFNO0FBQ3pELE1BQU1DLE9BQU8sR0FBR0gsSUFBSSxDQUFDSSxLQUFMLEVBQWhCO0FBQUEsTUFBOEI7QUFDeEJDLEVBQUFBLE9BQU8sR0FBR0YsT0FBTyxDQUFDRyxNQUFSLENBQWUsVUFBU0QsT0FBVCxFQUFrQkUsTUFBbEIsRUFBMEJDLEtBQTFCLEVBQWlDO0FBQ3hELFFBQU1DLEdBQUcsR0FBR1QsSUFBSSxDQUFDUSxLQUFELENBQWhCO0FBRUFILElBQUFBLE9BQU8sR0FBSUksR0FBRyxLQUFLQyxTQUFULGFBQ0tMLE9BREwsU0FDZUUsTUFEZixTQUN3QkUsR0FEeEIsY0FFT0osT0FGUCxTQUVpQkUsTUFGakIsQ0FBVjtBQUlBLFdBQU9GLE9BQVA7QUFDRCxHQVJTLEVBUVAsRUFSTyxDQURoQjtBQUFBLE1BVU1NLE1BQU0sR0FBRzVCLFFBQVEsQ0FBQzZCLFFBQVQsQ0FBa0JQLE9BQWxCLENBVmY7QUFBQSxNQVdNUSxJQUFJLEdBQUc1QixTQUFTLENBQUM2QixLQUFWLENBQWdCSCxNQUFoQixDQVhiO0FBQUEsTUFZTUksS0FBSyxHQUFHcEMsS0FBSyxDQUFDcUMsaUJBQU4sQ0FBd0JILElBQXhCLEVBQThCRixNQUE5QixDQVpkOztBQWNNLE1BQUlULFVBQVUsS0FBSyxJQUFuQixFQUF5QjtBQUN2QmEsSUFBQUEsS0FBSyxXQUFMLENBQWNiLFVBQWQ7QUFDRDs7QUFFRGhCLEVBQUFBLFFBQVEsQ0FBQ2UsU0FBRCxDQUFSLEdBQXNCYyxLQUF0QjtBQUNQOztBQUVELFNBQVNFLGFBQVQsQ0FBdUJoQixTQUF2QixFQUFrQztBQUNoQyxNQUFNYyxLQUFLLEdBQUc3QixRQUFRLENBQUNlLFNBQUQsQ0FBUixJQUF1QixJQUFyQztBQUVBLFNBQU9jLEtBQVA7QUFDRDs7QUFFREcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZoQyxFQUFBQSxZQUFZLEVBQVpBLFlBRGU7QUFFZlksRUFBQUEsYUFBYSxFQUFiQSxhQUZlO0FBR2ZrQixFQUFBQSxhQUFhLEVBQWJBO0FBSGUsQ0FBakI7O0FBTUEsU0FBUzVCLGlCQUFULEdBQTZCO0FBQzNCLE1BQU0rQixVQUFVLEdBQUd4QixNQUFNLENBQUN5QixJQUFQLENBQVluQyxRQUFaLENBQW5CO0FBQUEsTUFDTUUsU0FBUyxHQUFHZ0MsVUFBVSxDQUFDZCxNQUFYLENBQWtCLFVBQVNsQixTQUFULEVBQW9CYSxTQUFwQixFQUErQjtBQUMzRCxRQUFNYyxLQUFLLEdBQUdFLGFBQWEsQ0FBQ2hCLFNBQUQsQ0FBM0I7QUFBQSxRQUNNcUIsUUFBUSxHQUFHUCxLQUFLLENBQUNRLEtBQU4sQ0FBWXRCLFNBQVosQ0FEakI7QUFHQWIsSUFBQUEsU0FBUyxJQUFJa0MsUUFBYjtBQUVBLFdBQU9sQyxTQUFQO0FBQ0QsR0FQVyxFQU9ULEVBUFMsQ0FEbEI7QUFVQSxTQUFPQSxTQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFN0eWxlID0gcmVxdWlyZSgnLi4vc3R5bGUnKSxcbiAgICAgIENTU0xleGVyID0gcmVxdWlyZSgnLi4vY3NzL2xleGVyJyksXG4gICAgICBDU1NQYXJzZXIgPSByZXF1aXJlKCcuLi9jc3MvcGFyc2VyJyk7XG5cbmNvbnN0IGNzc0xleGVyID0gQ1NTTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIGNzc1BhcnNlciA9IENTU1BhcnNlci5mcm9tTm90aGluZygpO1xuXG5jb25zdCBzdHlsZU1hcCA9IHt9O1xuXG5mdW5jdGlvbiByZW5kZXJTdHlsZXMoKSB7XG4gIGNvbnN0IHN0eWxlc0NTUyA9IHJldHJpZXZlU3R5bGVzQ1NTKCksXG4gICAgICAgIGlubmVySFRNTCA9IGBcbiAgICAgICAgXG4ke3N0eWxlc0NTU31gLFxuICAgICAgaGVhZERPTUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkJyksXG4gICAgICBzdHlsZURPTUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuXG4gIE9iamVjdC5hc3NpZ24oc3R5bGVET01FbGVtZW50LCB7XG4gICAgaW5uZXJIVE1MXG4gIH0pO1xuXG4gIGhlYWRET01FbGVtZW50LmFwcGVuZENoaWxkKHN0eWxlRE9NRWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlU3R5bGUoYXJncywgY2xhc3NOYW1lLCBzdXBlclN0eWxlID0gbnVsbCkge1xuICBjb25zdCBzdHJpbmdzID0gYXJncy5zaGlmdCgpLFx0Ly8vXG4gICAgICAgIGNvbnRlbnQgPSBzdHJpbmdzLnJlZHVjZShmdW5jdGlvbihjb250ZW50LCBzdHJpbmcsIGluZGV4KSB7XG4gICAgICAgICAgY29uc3QgYXJnID0gYXJnc1tpbmRleF07XG5cbiAgICAgICAgICBjb250ZW50ID0gKGFyZyAhPT0gdW5kZWZpbmVkKSA/XG4gICAgICAgICAgICAgICAgICAgICAgYCR7Y29udGVudH0ke3N0cmluZ30ke2FyZ31gIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGAke2NvbnRlbnR9JHtzdHJpbmd9YDtcblxuICAgICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgICB9LCAnJyksXG4gICAgICAgIHRva2VucyA9IGNzc0xleGVyLnRva2VuaXNlKGNvbnRlbnQpLFxuICAgICAgICBub2RlID0gY3NzUGFyc2VyLnBhcnNlKHRva2VucyksXG4gICAgICAgIHN0eWxlID0gU3R5bGUuZnJvbU5vZGVBbmRUb2tlbnMobm9kZSwgdG9rZW5zKTtcblxuICAgICAgICBpZiAoc3VwZXJTdHlsZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHN0eWxlLmV4dGVuZHMoc3VwZXJTdHlsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdHlsZU1hcFtjbGFzc05hbWVdID0gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJldHJpZXZlU3R5bGUoY2xhc3NOYW1lKSB7XG4gIGNvbnN0IHN0eWxlID0gc3R5bGVNYXBbY2xhc3NOYW1lXSB8fCBudWxsO1xuXG4gIHJldHVybiBzdHlsZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHJlbmRlclN0eWxlcyxcbiAgZ2VuZXJhdGVTdHlsZSxcbiAgcmV0cmlldmVTdHlsZVxufTtcblxuZnVuY3Rpb24gcmV0cmlldmVTdHlsZXNDU1MoKSB7XG4gIGNvbnN0IGNsYXNzTmFtZXMgPSBPYmplY3Qua2V5cyhzdHlsZU1hcCksXG4gICAgICAgIHN0eWxlc0NTUyA9IGNsYXNzTmFtZXMucmVkdWNlKGZ1bmN0aW9uKHN0eWxlc0NTUywgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgY29uc3Qgc3R5bGUgPSByZXRyaWV2ZVN0eWxlKGNsYXNzTmFtZSksXG4gICAgICAgICAgICAgICAgc3R5bGVDU1MgPSBzdHlsZS5hc0NTUyhjbGFzc05hbWUpO1xuXG4gICAgICAgICAgc3R5bGVzQ1NTICs9IHN0eWxlQ1NTO1xuXG4gICAgICAgICAgcmV0dXJuIHN0eWxlc0NTUztcbiAgICAgICAgfSwgJycpO1xuXG4gIHJldHVybiBzdHlsZXNDU1M7XG59XG4iXX0=