'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var Style = require('../style'),
    CSSLexer = require('../css/lexer'),
    CSSParser = require('../css/parser');

var cssLexer = CSSLexer.fromNothing(),
    cssParser = CSSParser.fromNothing();

var styleMap = {};

function renderStyles() {
  var stylesCSS = retrieveStylesCSS(),
      innerHTML = '\n        \n' + stylesCSS,
      headDOMElement = document.querySelector('head'),
      styleDOMElement = document.createElement('style');

  Object.assign(styleDOMElement, {
    innerHTML: innerHTML
  });

  headDOMElement.appendChild(styleDOMElement);
}

function generateStyle(args, className) {
  var superStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  var strings = args.shift(),
      ///
  content = strings.reduce(function (content, cssString, index) {
    var arg = args[index];

    content += cssString;

    switch (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) {
      case 'string':
        content += arg;
        break;

      case 'function':
        content += arg();
        break;
    }

    return content;
  }, ''),
      tokens = cssLexer.tokenise(content),
      node = cssParser.parse(tokens),
      style = Style.fromNodeAndTokens(node, tokens);

  if (superStyle !== null) {
    style.extends(superStyle);
  }

  styleMap[className] = style;
}

function retrieveStyle(className) {
  var style = styleMap[className];

  return style;
}

module.exports = {
  renderStyles: renderStyles,
  generateStyle: generateStyle,
  retrieveStyle: retrieveStyle
};

function retrieveStylesCSS() {
  var classNames = Object.keys(styleMap),
      stylesCSS = classNames.reduce(function (stylesCSS, className) {
    var style = retrieveStyle(className),
        styleCSS = style.asCSS(className);

    stylesCSS += styleCSS;

    return stylesCSS;
  }, '');

  return stylesCSS;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvc3R5bGVzLmpzIl0sIm5hbWVzIjpbIlN0eWxlIiwicmVxdWlyZSIsIkNTU0xleGVyIiwiQ1NTUGFyc2VyIiwiY3NzTGV4ZXIiLCJmcm9tTm90aGluZyIsImNzc1BhcnNlciIsInN0eWxlTWFwIiwicmVuZGVyU3R5bGVzIiwic3R5bGVzQ1NTIiwicmV0cmlldmVTdHlsZXNDU1MiLCJpbm5lckhUTUwiLCJoZWFkRE9NRWxlbWVudCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInN0eWxlRE9NRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJPYmplY3QiLCJhc3NpZ24iLCJhcHBlbmRDaGlsZCIsImdlbmVyYXRlU3R5bGUiLCJhcmdzIiwiY2xhc3NOYW1lIiwic3VwZXJTdHlsZSIsInN0cmluZ3MiLCJzaGlmdCIsImNvbnRlbnQiLCJyZWR1Y2UiLCJjc3NTdHJpbmciLCJpbmRleCIsImFyZyIsInRva2VucyIsInRva2VuaXNlIiwibm9kZSIsInBhcnNlIiwic3R5bGUiLCJmcm9tTm9kZUFuZFRva2VucyIsImV4dGVuZHMiLCJyZXRyaWV2ZVN0eWxlIiwibW9kdWxlIiwiZXhwb3J0cyIsImNsYXNzTmFtZXMiLCJrZXlzIiwic3R5bGVDU1MiLCJhc0NTUyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxJQUFNQSxRQUFRQyxRQUFRLFVBQVIsQ0FBZDtBQUFBLElBQ01DLFdBQVdELFFBQVEsY0FBUixDQURqQjtBQUFBLElBRU1FLFlBQVlGLFFBQVEsZUFBUixDQUZsQjs7QUFJQSxJQUFNRyxXQUFXRixTQUFTRyxXQUFULEVBQWpCO0FBQUEsSUFDTUMsWUFBWUgsVUFBVUUsV0FBVixFQURsQjs7QUFHQSxJQUFNRSxXQUFXLEVBQWpCOztBQUVBLFNBQVNDLFlBQVQsR0FBd0I7QUFDdEIsTUFBTUMsWUFBWUMsbUJBQWxCO0FBQUEsTUFDTUMsNkJBRU5GLFNBSEE7QUFBQSxNQUlJRyxpQkFBaUJDLFNBQVNDLGFBQVQsQ0FBdUIsTUFBdkIsQ0FKckI7QUFBQSxNQUtJQyxrQkFBa0JGLFNBQVNHLGFBQVQsQ0FBdUIsT0FBdkIsQ0FMdEI7O0FBT0FDLFNBQU9DLE1BQVAsQ0FBY0gsZUFBZCxFQUErQjtBQUM3Qko7QUFENkIsR0FBL0I7O0FBSUFDLGlCQUFlTyxXQUFmLENBQTJCSixlQUEzQjtBQUNEOztBQUVELFNBQVNLLGFBQVQsQ0FBdUJDLElBQXZCLEVBQTZCQyxTQUE3QixFQUEyRDtBQUFBLE1BQW5CQyxVQUFtQix1RUFBTixJQUFNOztBQUN6RCxNQUFNQyxVQUFVSCxLQUFLSSxLQUFMLEVBQWhCO0FBQUEsTUFBOEI7QUFDeEJDLFlBQVVGLFFBQVFHLE1BQVIsQ0FBZSxVQUFTRCxPQUFULEVBQWtCRSxTQUFsQixFQUE2QkMsS0FBN0IsRUFBb0M7QUFDM0QsUUFBTUMsTUFBTVQsS0FBS1EsS0FBTCxDQUFaOztBQUVBSCxlQUFXRSxTQUFYOztBQUVBLG1CQUFlRSxHQUFmLHlDQUFlQSxHQUFmO0FBQ0UsV0FBSyxRQUFMO0FBQ0VKLG1CQUFXSSxHQUFYO0FBQ0E7O0FBRUYsV0FBSyxVQUFMO0FBQ0VKLG1CQUFXSSxLQUFYO0FBQ0E7QUFQSjs7QUFVQSxXQUFPSixPQUFQO0FBQ0QsR0FoQlMsRUFnQlAsRUFoQk8sQ0FEaEI7QUFBQSxNQWtCTUssU0FBUzNCLFNBQVM0QixRQUFULENBQWtCTixPQUFsQixDQWxCZjtBQUFBLE1BbUJNTyxPQUFPM0IsVUFBVTRCLEtBQVYsQ0FBZ0JILE1BQWhCLENBbkJiO0FBQUEsTUFvQk1JLFFBQVFuQyxNQUFNb0MsaUJBQU4sQ0FBd0JILElBQXhCLEVBQThCRixNQUE5QixDQXBCZDs7QUFzQk0sTUFBSVIsZUFBZSxJQUFuQixFQUF5QjtBQUN2QlksVUFBTUUsT0FBTixDQUFjZCxVQUFkO0FBQ0Q7O0FBRURoQixXQUFTZSxTQUFULElBQXNCYSxLQUF0QjtBQUNQOztBQUVELFNBQVNHLGFBQVQsQ0FBdUJoQixTQUF2QixFQUFrQztBQUNoQyxNQUFNYSxRQUFRNUIsU0FBU2UsU0FBVCxDQUFkOztBQUVBLFNBQU9hLEtBQVA7QUFDRDs7QUFFREksT0FBT0MsT0FBUCxHQUFpQjtBQUNmaEMsNEJBRGU7QUFFZlksOEJBRmU7QUFHZmtCO0FBSGUsQ0FBakI7O0FBTUEsU0FBUzVCLGlCQUFULEdBQTZCO0FBQzNCLE1BQU0rQixhQUFheEIsT0FBT3lCLElBQVAsQ0FBWW5DLFFBQVosQ0FBbkI7QUFBQSxNQUNNRSxZQUFZZ0MsV0FBV2QsTUFBWCxDQUFrQixVQUFTbEIsU0FBVCxFQUFvQmEsU0FBcEIsRUFBK0I7QUFDM0QsUUFBTWEsUUFBUUcsY0FBY2hCLFNBQWQsQ0FBZDtBQUFBLFFBQ01xQixXQUFXUixNQUFNUyxLQUFOLENBQVl0QixTQUFaLENBRGpCOztBQUdBYixpQkFBYWtDLFFBQWI7O0FBRUEsV0FBT2xDLFNBQVA7QUFDRCxHQVBXLEVBT1QsRUFQUyxDQURsQjs7QUFVQSxTQUFPQSxTQUFQO0FBQ0QiLCJmaWxlIjoic3R5bGVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBTdHlsZSA9IHJlcXVpcmUoJy4uL3N0eWxlJyksXG4gICAgICBDU1NMZXhlciA9IHJlcXVpcmUoJy4uL2Nzcy9sZXhlcicpLFxuICAgICAgQ1NTUGFyc2VyID0gcmVxdWlyZSgnLi4vY3NzL3BhcnNlcicpO1xuXG5jb25zdCBjc3NMZXhlciA9IENTU0xleGVyLmZyb21Ob3RoaW5nKCksXG4gICAgICBjc3NQYXJzZXIgPSBDU1NQYXJzZXIuZnJvbU5vdGhpbmcoKTtcblxuY29uc3Qgc3R5bGVNYXAgPSB7fTtcblxuZnVuY3Rpb24gcmVuZGVyU3R5bGVzKCkge1xuICBjb25zdCBzdHlsZXNDU1MgPSByZXRyaWV2ZVN0eWxlc0NTUygpLFxuICAgICAgICBpbm5lckhUTUwgPSBgXG4gICAgICAgIFxuJHtzdHlsZXNDU1N9YCxcbiAgICAgIGhlYWRET01FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaGVhZCcpLFxuICAgICAgc3R5bGVET01FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcblxuICBPYmplY3QuYXNzaWduKHN0eWxlRE9NRWxlbWVudCwge1xuICAgIGlubmVySFRNTFxuICB9KTtcblxuICBoZWFkRE9NRWxlbWVudC5hcHBlbmRDaGlsZChzdHlsZURPTUVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVN0eWxlKGFyZ3MsIGNsYXNzTmFtZSwgc3VwZXJTdHlsZSA9IG51bGwpIHtcbiAgY29uc3Qgc3RyaW5ncyA9IGFyZ3Muc2hpZnQoKSxcdC8vL1xuICAgICAgICBjb250ZW50ID0gc3RyaW5ncy5yZWR1Y2UoZnVuY3Rpb24oY29udGVudCwgY3NzU3RyaW5nLCBpbmRleCkge1xuICAgICAgICAgIGNvbnN0IGFyZyA9IGFyZ3NbaW5kZXhdO1xuXG4gICAgICAgICAgY29udGVudCArPSBjc3NTdHJpbmc7XG5cbiAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiBhcmcpIHtcbiAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICAgIGNvbnRlbnQgKz0gYXJnO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICAgICAgICBjb250ZW50ICs9IGFyZygpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgICAgfSwgJycpLFxuICAgICAgICB0b2tlbnMgPSBjc3NMZXhlci50b2tlbmlzZShjb250ZW50KSxcbiAgICAgICAgbm9kZSA9IGNzc1BhcnNlci5wYXJzZSh0b2tlbnMpLFxuICAgICAgICBzdHlsZSA9IFN0eWxlLmZyb21Ob2RlQW5kVG9rZW5zKG5vZGUsIHRva2Vucyk7XG5cbiAgICAgICAgaWYgKHN1cGVyU3R5bGUgIT09IG51bGwpIHtcbiAgICAgICAgICBzdHlsZS5leHRlbmRzKHN1cGVyU3R5bGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3R5bGVNYXBbY2xhc3NOYW1lXSA9IHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZXRyaWV2ZVN0eWxlKGNsYXNzTmFtZSkge1xuICBjb25zdCBzdHlsZSA9IHN0eWxlTWFwW2NsYXNzTmFtZV07XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcmVuZGVyU3R5bGVzLFxuICBnZW5lcmF0ZVN0eWxlLFxuICByZXRyaWV2ZVN0eWxlXG59O1xuXG5mdW5jdGlvbiByZXRyaWV2ZVN0eWxlc0NTUygpIHtcbiAgY29uc3QgY2xhc3NOYW1lcyA9IE9iamVjdC5rZXlzKHN0eWxlTWFwKSxcbiAgICAgICAgc3R5bGVzQ1NTID0gY2xhc3NOYW1lcy5yZWR1Y2UoZnVuY3Rpb24oc3R5bGVzQ1NTLCBjbGFzc05hbWUpIHtcbiAgICAgICAgICBjb25zdCBzdHlsZSA9IHJldHJpZXZlU3R5bGUoY2xhc3NOYW1lKSxcbiAgICAgICAgICAgICAgICBzdHlsZUNTUyA9IHN0eWxlLmFzQ1NTKGNsYXNzTmFtZSk7XG5cbiAgICAgICAgICBzdHlsZXNDU1MgKz0gc3R5bGVDU1M7XG5cbiAgICAgICAgICByZXR1cm4gc3R5bGVzQ1NTO1xuICAgICAgICB9LCAnJyk7XG5cbiAgcmV0dXJuIHN0eWxlc0NTUztcbn1cbiJdfQ==