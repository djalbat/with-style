"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _style = _interopRequireDefault(require("../style"));
var _lexer = _interopRequireDefault(require("../css/lexer"));
var _parser = _interopRequireDefault(require("../css/parser"));
var _constants = require("../constants");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var cssLexer = _lexer.default.fromNothing(), cssParser = _parser.default.fromNothing();
if (!globalThis.styleMap) {
    globalThis.styleMap = {};
}
var styleMap = globalThis.styleMap;
function renderStyle(style) {
    var headDOMElement = document.querySelector(_constants.HEAD), styleDOMElement = document.createElement(_constants.STYLE), innerHTML = "\n        \n".concat(style);
    Object.assign(styleDOMElement, {
        innerHTML: innerHTML
    });
    headDOMElement.appendChild(styleDOMElement);
}
function renderStyles() {
    var stylesCSS = retrieveStylesCSS(), style = stylesCSS; ///
    renderStyle(style);
}
function generateStyle(args, className) {
    var superStyle = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
    var strings = args.shift(), content1 = strings.reduce(function(content, string, index) {
        var arg = args[index];
        content = arg !== undefined ? "".concat(content).concat(string).concat(arg) : "".concat(content).concat(string);
        return content;
    }, _constants.EMPTY_STRING), tokens = cssLexer.tokenise(content1), node = cssParser.parse(tokens), style = _style.default.fromNodeAndTokens(node, tokens);
    if (superStyle !== null) {
        style.extends(superStyle);
    }
    styleMap[className] = style;
}
function retrieveStyle(className) {
    var style = styleMap[className] || null;
    return style;
}
var _default = {
    renderStyle: renderStyle,
    renderStyles: renderStyles,
    generateStyle: generateStyle,
    retrieveStyle: retrieveStyle
};
exports.default = _default;
function retrieveStylesCSS() {
    var classNames = Object.keys(styleMap), stylesCSS1 = classNames.reduce(function(stylesCSS, className) {
        var style = retrieveStyle(className), styleCSS = style.asCSS(className);
        stylesCSS += styleCSS;
        return stylesCSS;
    }, _constants.EMPTY_STRING);
    return stylesCSS1;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvc3R5bGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgU3R5bGUgZnJvbSBcIi4uL3N0eWxlXCI7XG5pbXBvcnQgQ1NTTGV4ZXIgZnJvbSBcIi4uL2Nzcy9sZXhlclwiO1xuaW1wb3J0IENTU1BhcnNlciBmcm9tIFwiLi4vY3NzL3BhcnNlclwiO1xuXG5pbXBvcnQgeyBIRUFELCBTVFlMRSwgRU1QVFlfU1RSSU5HIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuXG5jb25zdCBjc3NMZXhlciA9IENTU0xleGVyLmZyb21Ob3RoaW5nKCksXG4gICAgICBjc3NQYXJzZXIgPSBDU1NQYXJzZXIuZnJvbU5vdGhpbmcoKTtcblxuaWYgKCFnbG9iYWxUaGlzLnN0eWxlTWFwKSB7XG4gIGdsb2JhbFRoaXMuc3R5bGVNYXAgPSB7fTtcbn1cblxuY29uc3QgeyBzdHlsZU1hcCB9ID0gZ2xvYmFsVGhpcztcblxuZnVuY3Rpb24gcmVuZGVyU3R5bGUoc3R5bGUpIHtcbiAgY29uc3QgaGVhZERPTUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKEhFQUQpLFxuICAgICAgICBzdHlsZURPTUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFNUWUxFKSxcbiAgICAgICAgaW5uZXJIVE1MID0gYFxuICAgICAgICBcbiR7c3R5bGV9YDtcblxuICBPYmplY3QuYXNzaWduKHN0eWxlRE9NRWxlbWVudCwge1xuICAgIGlubmVySFRNTFxuICB9KTtcblxuICBoZWFkRE9NRWxlbWVudC5hcHBlbmRDaGlsZChzdHlsZURPTUVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiByZW5kZXJTdHlsZXMoKSB7XG4gIGNvbnN0IHN0eWxlc0NTUyA9IHJldHJpZXZlU3R5bGVzQ1NTKCksXG4gICAgICAgIHN0eWxlID0gc3R5bGVzQ1NTOyAgLy8vXG5cbiAgcmVuZGVyU3R5bGUoc3R5bGUpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVN0eWxlKGFyZ3MsIGNsYXNzTmFtZSwgc3VwZXJTdHlsZSA9IG51bGwpIHtcbiAgY29uc3Qgc3RyaW5ncyA9IGFyZ3Muc2hpZnQoKSxcdC8vL1xuICAgICAgICBjb250ZW50ID0gc3RyaW5ncy5yZWR1Y2UoKGNvbnRlbnQsIHN0cmluZywgaW5kZXgpID0+IHtcbiAgICAgICAgICBjb25zdCBhcmcgPSBhcmdzW2luZGV4XTtcblxuICAgICAgICAgIGNvbnRlbnQgPSAoYXJnICE9PSB1bmRlZmluZWQpID9cbiAgICAgICAgICAgICAgICAgICAgICBgJHtjb250ZW50fSR7c3RyaW5nfSR7YXJnfWAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgYCR7Y29udGVudH0ke3N0cmluZ31gO1xuXG4gICAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICAgIH0sIEVNUFRZX1NUUklORyksXG4gICAgICAgIHRva2VucyA9IGNzc0xleGVyLnRva2VuaXNlKGNvbnRlbnQpLFxuICAgICAgICBub2RlID0gY3NzUGFyc2VyLnBhcnNlKHRva2VucyksXG4gICAgICAgIHN0eWxlID0gU3R5bGUuZnJvbU5vZGVBbmRUb2tlbnMobm9kZSwgdG9rZW5zKTtcblxuICAgICAgICBpZiAoc3VwZXJTdHlsZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHN0eWxlLmV4dGVuZHMoc3VwZXJTdHlsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdHlsZU1hcFtjbGFzc05hbWVdID0gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJldHJpZXZlU3R5bGUoY2xhc3NOYW1lKSB7XG4gIGNvbnN0IHN0eWxlID0gc3R5bGVNYXBbY2xhc3NOYW1lXSB8fCBudWxsO1xuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICByZW5kZXJTdHlsZSxcbiAgcmVuZGVyU3R5bGVzLFxuICBnZW5lcmF0ZVN0eWxlLFxuICByZXRyaWV2ZVN0eWxlXG59O1xuXG5mdW5jdGlvbiByZXRyaWV2ZVN0eWxlc0NTUygpIHtcbiAgY29uc3QgY2xhc3NOYW1lcyA9IE9iamVjdC5rZXlzKHN0eWxlTWFwKSxcbiAgICAgICAgc3R5bGVzQ1NTID0gY2xhc3NOYW1lcy5yZWR1Y2UoKHN0eWxlc0NTUywgY2xhc3NOYW1lKSA9PiB7XG4gICAgICAgICAgY29uc3Qgc3R5bGUgPSByZXRyaWV2ZVN0eWxlKGNsYXNzTmFtZSksXG4gICAgICAgICAgICAgICAgc3R5bGVDU1MgPSBzdHlsZS5hc0NTUyhjbGFzc05hbWUpO1xuXG4gICAgICAgICAgc3R5bGVzQ1NTICs9IHN0eWxlQ1NTO1xuXG4gICAgICAgICAgcmV0dXJuIHN0eWxlc0NTUztcbiAgICAgICAgfSwgRU1QVFlfU1RSSU5HKTtcblxuICByZXR1cm4gc3R5bGVzQ1NTO1xufVxuIl0sIm5hbWVzIjpbImNzc0xleGVyIiwiQ1NTTGV4ZXIiLCJmcm9tTm90aGluZyIsImNzc1BhcnNlciIsIkNTU1BhcnNlciIsImdsb2JhbFRoaXMiLCJzdHlsZU1hcCIsInJlbmRlclN0eWxlIiwic3R5bGUiLCJoZWFkRE9NRWxlbWVudCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIkhFQUQiLCJzdHlsZURPTUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiU1RZTEUiLCJpbm5lckhUTUwiLCJPYmplY3QiLCJhc3NpZ24iLCJhcHBlbmRDaGlsZCIsInJlbmRlclN0eWxlcyIsInN0eWxlc0NTUyIsInJldHJpZXZlU3R5bGVzQ1NTIiwiZ2VuZXJhdGVTdHlsZSIsImFyZ3MiLCJjbGFzc05hbWUiLCJzdXBlclN0eWxlIiwic3RyaW5ncyIsInNoaWZ0IiwiY29udGVudCIsInJlZHVjZSIsInN0cmluZyIsImluZGV4IiwiYXJnIiwidW5kZWZpbmVkIiwiRU1QVFlfU1RSSU5HIiwidG9rZW5zIiwidG9rZW5pc2UiLCJub2RlIiwicGFyc2UiLCJTdHlsZSIsImZyb21Ob2RlQW5kVG9rZW5zIiwiZXh0ZW5kcyIsInJldHJpZXZlU3R5bGUiLCJjbGFzc05hbWVzIiwia2V5cyIsInN0eWxlQ1NTIiwiYXNDU1MiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7Ozs7QUFFSyxJQUFBLE1BQVUsa0NBQVYsVUFBVSxFQUFBO0FBQ1AsSUFBQSxNQUFjLGtDQUFkLGNBQWMsRUFBQTtBQUNiLElBQUEsT0FBZSxrQ0FBZixlQUFlLEVBQUE7QUFFSyxJQUFBLFVBQWMsV0FBZCxjQUFjLENBQUE7Ozs7OztBQUV4RCxJQUFNQSxRQUFRLEdBQUdDLE1BQVEsUUFBQSxDQUFDQyxXQUFXLEVBQUUsRUFDakNDLFNBQVMsR0FBR0MsT0FBUyxRQUFBLENBQUNGLFdBQVcsRUFBRSxBQUFDO0FBRTFDLElBQUksQ0FBQ0csVUFBVSxDQUFDQyxRQUFRLEVBQUU7SUFDeEJELFVBQVUsQ0FBQ0MsUUFBUSxHQUFHLEVBQUUsQ0FBQztDQUMxQjtBQUVELElBQU0sQUFBRUEsUUFBUSxHQUFLRCxVQUFVLENBQXZCQyxRQUFRLEFBQWUsQUFBQztBQUVoQyxTQUFTQyxXQUFXLENBQUNDLEtBQUssRUFBRTtJQUMxQixJQUFNQyxjQUFjLEdBQUdDLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDQyxVQUFJLEtBQUEsQ0FBQyxFQUM3Q0MsZUFBZSxHQUFHSCxRQUFRLENBQUNJLGFBQWEsQ0FBQ0MsVUFBSyxNQUFBLENBQUMsRUFDL0NDLFNBQVMsR0FBRyxBQUFDLGNBRXJCLENBQVEsTUFBQSxDQUFOUixLQUFLLENBQUUsQUFBQztJQUVSUyxNQUFNLENBQUNDLE1BQU0sQ0FBQ0wsZUFBZSxFQUFFO1FBQzdCRyxTQUFTLEVBQVRBLFNBQVM7S0FDVixDQUFDLENBQUM7SUFFSFAsY0FBYyxDQUFDVSxXQUFXLENBQUNOLGVBQWUsQ0FBQyxDQUFDO0NBQzdDO0FBRUQsU0FBU08sWUFBWSxHQUFHO0lBQ3RCLElBQU1DLFNBQVMsR0FBR0MsaUJBQWlCLEVBQUUsRUFDL0JkLEtBQUssR0FBR2EsU0FBUyxBQUFDLEVBQUUsR0FBRztJQUU3QmQsV0FBVyxDQUFDQyxLQUFLLENBQUMsQ0FBQztDQUNwQjtBQUVELFNBQVNlLGFBQWEsQ0FBQ0MsSUFBSSxFQUFFQyxTQUFTLEVBQXFCO1FBQW5CQyxVQUFVLEdBQVZBLCtDQUFpQixrQkFBSixJQUFJO0lBQ3ZELElBQU1DLE9BQU8sR0FBR0gsSUFBSSxDQUFDSSxLQUFLLEVBQUUsRUFDdEJDLFFBQU8sR0FBR0YsT0FBTyxDQUFDRyxNQUFNLENBQUMsU0FBQ0QsT0FBTyxFQUFFRSxNQUFNLEVBQUVDLEtBQUssRUFBSztRQUNuRCxJQUFNQyxHQUFHLEdBQUdULElBQUksQ0FBQ1EsS0FBSyxDQUFDLEFBQUM7UUFFeEJILE9BQU8sR0FBRyxBQUFDSSxHQUFHLEtBQUtDLFNBQVMsR0FDaEIsQUFBQyxFQUFBLENBQVlILE1BQU0sQ0FBaEJGLE9BQU8sQ0FBVSxDQUFFSSxNQUFHLENBQVpGLE1BQU0sQ0FBTyxDQUFBLE1BQUEsQ0FBSkUsR0FBRyxDQUFFLEdBQ3pCLEFBQUMsRUFBQSxDQUFZRixNQUFNLENBQWhCRixPQUFPLENBQVUsQ0FBQSxNQUFBLENBQVBFLE1BQU0sQ0FBRSxDQUFDO1FBRXBDLE9BQU9GLE9BQU8sQ0FBQztLQUNoQixFQUFFTSxVQUFZLGFBQUEsQ0FBQyxFQUNoQkMsTUFBTSxHQUFHcEMsUUFBUSxDQUFDcUMsUUFBUSxDQUFDUixRQUFPLENBQUMsRUFDbkNTLElBQUksR0FBR25DLFNBQVMsQ0FBQ29DLEtBQUssQ0FBQ0gsTUFBTSxDQUFDLEVBQzlCNUIsS0FBSyxHQUFHZ0MsTUFBSyxRQUFBLENBQUNDLGlCQUFpQixDQUFDSCxJQUFJLEVBQUVGLE1BQU0sQ0FBQyxBQUFDO0lBRTlDLElBQUlWLFVBQVUsS0FBSyxJQUFJLEVBQUU7UUFDdkJsQixLQUFLLENBQUNrQyxPQUFPLENBQUNoQixVQUFVLENBQUMsQ0FBQztLQUMzQjtJQUVEcEIsUUFBUSxDQUFDbUIsU0FBUyxDQUFDLEdBQUdqQixLQUFLLENBQUM7Q0FDbkM7QUFFRCxTQUFTbUMsYUFBYSxDQUFDbEIsU0FBUyxFQUFFO0lBQ2hDLElBQU1qQixLQUFLLEdBQUdGLFFBQVEsQ0FBQ21CLFNBQVMsQ0FBQyxJQUFJLElBQUksQUFBQztJQUUxQyxPQUFPakIsS0FBSyxDQUFDO0NBQ2Q7ZUFFYztJQUNiRCxXQUFXLEVBQVhBLFdBQVc7SUFDWGEsWUFBWSxFQUFaQSxZQUFZO0lBQ1pHLGFBQWEsRUFBYkEsYUFBYTtJQUNib0IsYUFBYSxFQUFiQSxhQUFhO0NBQ2Q7O0FBRUQsU0FBU3JCLGlCQUFpQixHQUFHO0lBQzNCLElBQU1zQixVQUFVLEdBQUczQixNQUFNLENBQUM0QixJQUFJLENBQUN2QyxRQUFRLENBQUMsRUFDbENlLFVBQVMsR0FBR3VCLFVBQVUsQ0FBQ2QsTUFBTSxDQUFDLFNBQUNULFNBQVMsRUFBRUksU0FBUyxFQUFLO1FBQ3RELElBQU1qQixLQUFLLEdBQUdtQyxhQUFhLENBQUNsQixTQUFTLENBQUMsRUFDaENxQixRQUFRLEdBQUd0QyxLQUFLLENBQUN1QyxLQUFLLENBQUN0QixTQUFTLENBQUMsQUFBQztRQUV4Q0osU0FBUyxJQUFJeUIsUUFBUSxDQUFDO1FBRXRCLE9BQU96QixTQUFTLENBQUM7S0FDbEIsRUFBRWMsVUFBWSxhQUFBLENBQUMsQUFBQztJQUV2QixPQUFPZCxVQUFTLENBQUM7Q0FDbEIifQ==