"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _style = _interopRequireDefault(require("../style"));

var _lexer = _interopRequireDefault(require("../css/lexer"));

var _parser = _interopRequireDefault(require("../css/parser"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var cssLexer = _lexer["default"].fromNothing(),
    cssParser = _parser["default"].fromNothing();

var styleMap;

if (typeof window !== "undefined") {
  var _window = window;
  styleMap = _window.styleMap;
}

if (styleMap === undefined) {
  styleMap = {};
}

function renderStyle(style) {
  var headDOMElement = document.querySelector("head"),
      styleDOMElement = document.createElement("style"),
      innerHTML = "\n        \n".concat(style);
  Object.assign(styleDOMElement, {
    innerHTML: innerHTML
  });
  headDOMElement.appendChild(styleDOMElement);
}

function renderStyles() {
  var stylesCSS = retrieveStylesCSS(),
      style = stylesCSS; ///

  renderStyle(style);
}

function generateStyle(args, className) {
  var superStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  var strings = args.shift(),
      ///
  content = strings.reduce(function (content, string, index) {
    var arg = args[index];
    content = arg !== undefined ? "".concat(content).concat(string).concat(arg) : "".concat(content).concat(string);
    return content;
  }, ""),
      tokens = cssLexer.tokenise(content),
      node = cssParser.parse(tokens),
      style = _style["default"].fromNodeAndTokens(node, tokens);

  if (superStyle !== null) {
    style["extends"](superStyle);
  }

  styleMap[className] = style;
}

function retrieveStyle(className) {
  var style = styleMap[className] || null;
  return style;
}

var _default = {
  renderStyle: renderStyle,
  renderStyles: renderStyles,
  generateStyle: generateStyle,
  retrieveStyle: retrieveStyle
};
exports["default"] = _default;

function retrieveStylesCSS() {
  var classNames = Object.keys(styleMap),
      stylesCSS = classNames.reduce(function (stylesCSS, className) {
    var style = retrieveStyle(className),
        styleCSS = style.asCSS(className);
    stylesCSS += styleCSS;
    return stylesCSS;
  }, "");
  return stylesCSS;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlcy5qcyJdLCJuYW1lcyI6WyJjc3NMZXhlciIsIkNTU0xleGVyIiwiZnJvbU5vdGhpbmciLCJjc3NQYXJzZXIiLCJDU1NQYXJzZXIiLCJzdHlsZU1hcCIsIndpbmRvdyIsInVuZGVmaW5lZCIsInJlbmRlclN0eWxlIiwic3R5bGUiLCJoZWFkRE9NRWxlbWVudCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInN0eWxlRE9NRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJPYmplY3QiLCJhc3NpZ24iLCJhcHBlbmRDaGlsZCIsInJlbmRlclN0eWxlcyIsInN0eWxlc0NTUyIsInJldHJpZXZlU3R5bGVzQ1NTIiwiZ2VuZXJhdGVTdHlsZSIsImFyZ3MiLCJjbGFzc05hbWUiLCJzdXBlclN0eWxlIiwic3RyaW5ncyIsInNoaWZ0IiwiY29udGVudCIsInJlZHVjZSIsInN0cmluZyIsImluZGV4IiwiYXJnIiwidG9rZW5zIiwidG9rZW5pc2UiLCJub2RlIiwicGFyc2UiLCJTdHlsZSIsImZyb21Ob2RlQW5kVG9rZW5zIiwicmV0cmlldmVTdHlsZSIsImNsYXNzTmFtZXMiLCJrZXlzIiwic3R5bGVDU1MiLCJhc0NTUyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7OztBQUVBLElBQU1BLFFBQVEsR0FBR0Msa0JBQVNDLFdBQVQsRUFBakI7QUFBQSxJQUNNQyxTQUFTLEdBQUdDLG1CQUFVRixXQUFWLEVBRGxCOztBQUdBLElBQUlHLFFBQUo7O0FBRUEsSUFBSSxPQUFPQyxNQUFQLEtBQWtCLFdBQXRCLEVBQW1DO0FBQUEsZ0JBQ2pCQSxNQURpQjtBQUM5QkQsRUFBQUEsUUFEOEIsV0FDOUJBLFFBRDhCO0FBRWxDOztBQUVELElBQUlBLFFBQVEsS0FBS0UsU0FBakIsRUFBNEI7QUFDMUJGLEVBQUFBLFFBQVEsR0FBRyxFQUFYO0FBQ0Q7O0FBRUQsU0FBU0csV0FBVCxDQUFxQkMsS0FBckIsRUFBNEI7QUFDMUIsTUFBTUMsY0FBYyxHQUFHQyxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsTUFBdkIsQ0FBdkI7QUFBQSxNQUNNQyxlQUFlLEdBQUdGLFFBQVEsQ0FBQ0csYUFBVCxDQUF1QixPQUF2QixDQUR4QjtBQUFBLE1BRU1DLFNBQVMseUJBRWZOLEtBRmUsQ0FGZjtBQU1BTyxFQUFBQSxNQUFNLENBQUNDLE1BQVAsQ0FBY0osZUFBZCxFQUErQjtBQUM3QkUsSUFBQUEsU0FBUyxFQUFUQTtBQUQ2QixHQUEvQjtBQUlBTCxFQUFBQSxjQUFjLENBQUNRLFdBQWYsQ0FBMkJMLGVBQTNCO0FBQ0Q7O0FBRUQsU0FBU00sWUFBVCxHQUF3QjtBQUN0QixNQUFNQyxTQUFTLEdBQUdDLGlCQUFpQixFQUFuQztBQUFBLE1BQ01aLEtBQUssR0FBR1csU0FEZCxDQURzQixDQUVJOztBQUUxQlosRUFBQUEsV0FBVyxDQUFDQyxLQUFELENBQVg7QUFDRDs7QUFFRCxTQUFTYSxhQUFULENBQXVCQyxJQUF2QixFQUE2QkMsU0FBN0IsRUFBMkQ7QUFBQSxNQUFuQkMsVUFBbUIsdUVBQU4sSUFBTTs7QUFDekQsTUFBTUMsT0FBTyxHQUFHSCxJQUFJLENBQUNJLEtBQUwsRUFBaEI7QUFBQSxNQUE4QjtBQUN4QkMsRUFBQUEsT0FBTyxHQUFHRixPQUFPLENBQUNHLE1BQVIsQ0FBZSxVQUFDRCxPQUFELEVBQVVFLE1BQVYsRUFBa0JDLEtBQWxCLEVBQTRCO0FBQ25ELFFBQU1DLEdBQUcsR0FBR1QsSUFBSSxDQUFDUSxLQUFELENBQWhCO0FBRUFILElBQUFBLE9BQU8sR0FBSUksR0FBRyxLQUFLekIsU0FBVCxhQUNLcUIsT0FETCxTQUNlRSxNQURmLFNBQ3dCRSxHQUR4QixjQUVPSixPQUZQLFNBRWlCRSxNQUZqQixDQUFWO0FBSUEsV0FBT0YsT0FBUDtBQUNELEdBUlMsRUFRUCxFQVJPLENBRGhCO0FBQUEsTUFVTUssTUFBTSxHQUFHakMsUUFBUSxDQUFDa0MsUUFBVCxDQUFrQk4sT0FBbEIsQ0FWZjtBQUFBLE1BV01PLElBQUksR0FBR2hDLFNBQVMsQ0FBQ2lDLEtBQVYsQ0FBZ0JILE1BQWhCLENBWGI7QUFBQSxNQVlNeEIsS0FBSyxHQUFHNEIsa0JBQU1DLGlCQUFOLENBQXdCSCxJQUF4QixFQUE4QkYsTUFBOUIsQ0FaZDs7QUFjTSxNQUFJUixVQUFVLEtBQUssSUFBbkIsRUFBeUI7QUFDdkJoQixJQUFBQSxLQUFLLFdBQUwsQ0FBY2dCLFVBQWQ7QUFDRDs7QUFFRHBCLEVBQUFBLFFBQVEsQ0FBQ21CLFNBQUQsQ0FBUixHQUFzQmYsS0FBdEI7QUFDUDs7QUFFRCxTQUFTOEIsYUFBVCxDQUF1QmYsU0FBdkIsRUFBa0M7QUFDaEMsTUFBTWYsS0FBSyxHQUFHSixRQUFRLENBQUNtQixTQUFELENBQVIsSUFBdUIsSUFBckM7QUFFQSxTQUFPZixLQUFQO0FBQ0Q7O2VBRWM7QUFDYkQsRUFBQUEsV0FBVyxFQUFYQSxXQURhO0FBRWJXLEVBQUFBLFlBQVksRUFBWkEsWUFGYTtBQUdiRyxFQUFBQSxhQUFhLEVBQWJBLGFBSGE7QUFJYmlCLEVBQUFBLGFBQWEsRUFBYkE7QUFKYSxDOzs7QUFPZixTQUFTbEIsaUJBQVQsR0FBNkI7QUFDM0IsTUFBTW1CLFVBQVUsR0FBR3hCLE1BQU0sQ0FBQ3lCLElBQVAsQ0FBWXBDLFFBQVosQ0FBbkI7QUFBQSxNQUNNZSxTQUFTLEdBQUdvQixVQUFVLENBQUNYLE1BQVgsQ0FBa0IsVUFBQ1QsU0FBRCxFQUFZSSxTQUFaLEVBQTBCO0FBQ3RELFFBQU1mLEtBQUssR0FBRzhCLGFBQWEsQ0FBQ2YsU0FBRCxDQUEzQjtBQUFBLFFBQ01rQixRQUFRLEdBQUdqQyxLQUFLLENBQUNrQyxLQUFOLENBQVluQixTQUFaLENBRGpCO0FBR0FKLElBQUFBLFNBQVMsSUFBSXNCLFFBQWI7QUFFQSxXQUFPdEIsU0FBUDtBQUNELEdBUFcsRUFPVCxFQVBTLENBRGxCO0FBVUEsU0FBT0EsU0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBTdHlsZSBmcm9tIFwiLi4vc3R5bGVcIjtcbmltcG9ydCBDU1NMZXhlciBmcm9tIFwiLi4vY3NzL2xleGVyXCI7XG5pbXBvcnQgQ1NTUGFyc2VyIGZyb20gXCIuLi9jc3MvcGFyc2VyXCI7XG5cbmNvbnN0IGNzc0xleGVyID0gQ1NTTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIGNzc1BhcnNlciA9IENTU1BhcnNlci5mcm9tTm90aGluZygpO1xuXG5sZXQgc3R5bGVNYXA7XG5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICh7IHN0eWxlTWFwIH0gPSB3aW5kb3cpOyAgLy8vXG59XG5cbmlmIChzdHlsZU1hcCA9PT0gdW5kZWZpbmVkKSB7XG4gIHN0eWxlTWFwID0ge307XG59XG5cbmZ1bmN0aW9uIHJlbmRlclN0eWxlKHN0eWxlKSB7XG4gIGNvbnN0IGhlYWRET01FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImhlYWRcIiksXG4gICAgICAgIHN0eWxlRE9NRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSxcbiAgICAgICAgaW5uZXJIVE1MID0gYFxuICAgICAgICBcbiR7c3R5bGV9YDtcblxuICBPYmplY3QuYXNzaWduKHN0eWxlRE9NRWxlbWVudCwge1xuICAgIGlubmVySFRNTFxuICB9KTtcblxuICBoZWFkRE9NRWxlbWVudC5hcHBlbmRDaGlsZChzdHlsZURPTUVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiByZW5kZXJTdHlsZXMoKSB7XG4gIGNvbnN0IHN0eWxlc0NTUyA9IHJldHJpZXZlU3R5bGVzQ1NTKCksXG4gICAgICAgIHN0eWxlID0gc3R5bGVzQ1NTOyAgLy8vXG5cbiAgcmVuZGVyU3R5bGUoc3R5bGUpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVN0eWxlKGFyZ3MsIGNsYXNzTmFtZSwgc3VwZXJTdHlsZSA9IG51bGwpIHtcbiAgY29uc3Qgc3RyaW5ncyA9IGFyZ3Muc2hpZnQoKSxcdC8vL1xuICAgICAgICBjb250ZW50ID0gc3RyaW5ncy5yZWR1Y2UoKGNvbnRlbnQsIHN0cmluZywgaW5kZXgpID0+IHtcbiAgICAgICAgICBjb25zdCBhcmcgPSBhcmdzW2luZGV4XTtcblxuICAgICAgICAgIGNvbnRlbnQgPSAoYXJnICE9PSB1bmRlZmluZWQpID9cbiAgICAgICAgICAgICAgICAgICAgICBgJHtjb250ZW50fSR7c3RyaW5nfSR7YXJnfWAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgYCR7Y29udGVudH0ke3N0cmluZ31gO1xuXG4gICAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICAgIH0sIFwiXCIpLFxuICAgICAgICB0b2tlbnMgPSBjc3NMZXhlci50b2tlbmlzZShjb250ZW50KSxcbiAgICAgICAgbm9kZSA9IGNzc1BhcnNlci5wYXJzZSh0b2tlbnMpLFxuICAgICAgICBzdHlsZSA9IFN0eWxlLmZyb21Ob2RlQW5kVG9rZW5zKG5vZGUsIHRva2Vucyk7XG5cbiAgICAgICAgaWYgKHN1cGVyU3R5bGUgIT09IG51bGwpIHtcbiAgICAgICAgICBzdHlsZS5leHRlbmRzKHN1cGVyU3R5bGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3R5bGVNYXBbY2xhc3NOYW1lXSA9IHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZXRyaWV2ZVN0eWxlKGNsYXNzTmFtZSkge1xuICBjb25zdCBzdHlsZSA9IHN0eWxlTWFwW2NsYXNzTmFtZV0gfHwgbnVsbDtcblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcmVuZGVyU3R5bGUsXG4gIHJlbmRlclN0eWxlcyxcbiAgZ2VuZXJhdGVTdHlsZSxcbiAgcmV0cmlldmVTdHlsZVxufTtcblxuZnVuY3Rpb24gcmV0cmlldmVTdHlsZXNDU1MoKSB7XG4gIGNvbnN0IGNsYXNzTmFtZXMgPSBPYmplY3Qua2V5cyhzdHlsZU1hcCksXG4gICAgICAgIHN0eWxlc0NTUyA9IGNsYXNzTmFtZXMucmVkdWNlKChzdHlsZXNDU1MsIGNsYXNzTmFtZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHN0eWxlID0gcmV0cmlldmVTdHlsZShjbGFzc05hbWUpLFxuICAgICAgICAgICAgICAgIHN0eWxlQ1NTID0gc3R5bGUuYXNDU1MoY2xhc3NOYW1lKTtcblxuICAgICAgICAgIHN0eWxlc0NTUyArPSBzdHlsZUNTUztcblxuICAgICAgICAgIHJldHVybiBzdHlsZXNDU1M7XG4gICAgICAgIH0sIFwiXCIpO1xuXG4gIHJldHVybiBzdHlsZXNDU1M7XG59XG4iXX0=