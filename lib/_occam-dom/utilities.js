'use strict';

var parsers = require('occam-parsers'),
    ///
necessary = require('necessary');

var NonTerminalNode = parsers.NonTerminalNode,
    arrayUtilities = necessary.arrayUtilities,
    replace = arrayUtilities.replace;


function asContent(node, tokens) {
  var firstSignificantToken = node.getFirstSignificantToken(),
      lastSignificantToken = node.getLastSignificantToken(),
      firstToken = firstSignificantToken,
      ///
  lastToken = lastSignificantToken,
      ///
  firstTokenIndex = tokens.indexOf(firstToken),
      lastTokenIndex = tokens.indexOf(lastToken);

  var content = '';

  for (var index = firstTokenIndex; index <= lastTokenIndex; index++) {
    var token = tokens[index],
        tokenContent = token.getContent();

    content += tokenContent;
  }

  return content;
}

function replaceNodes(node, mappings) {
  var parentNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  var nodeTerminalNode = node.isTerminalNode();

  if (nodeTerminalNode) {
    return;
  }

  var ruleName = node.getRuleName(),
      childNodes = node.getChildNodes(),
      replacementNodeClass = mappings[ruleName] || null;

  if (replacementNodeClass) {
    var replacedNode = node,
        ///
    replacementNode = NonTerminalNode.fromRuleNameAndChildNodes(replacementNodeClass, ruleName, childNodes);

    if (parentNode === null) {
      node = replacementNode; ///
    } else {
      var _childNodes = parentNode.getChildNodes();

      replace(_childNodes, replacementNode, function (childNode) {
        if (childNode === replacedNode) {
          return true;
        }
      });
    }
  }

  parentNode = node; ///

  childNodes.forEach(function (childNode) {
    var node = childNode; ///

    replaceNodes(node, mappings, parentNode);
  });

  return node;
}

function queryByClass(node, Class) {
  var nodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  if (node instanceof Class) {
    nodes.push(node);
  }

  var nodeNonTerminalNode = node.isNonTerminalNode();

  if (nodeNonTerminalNode) {
    var childNodes = node.getChildNodes();

    childNodes.forEach(function (childNode) {
      queryByClass(childNode, Class, nodes);
    });
  }

  return nodes;
}

function queryByClasses(node, Classes) {
  var nodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  Classes.some(function (Class) {
    if (node instanceof Class) {
      nodes.push(node);

      return true;
    }
  });

  var nodeNonTerminalNode = node.isNonTerminalNode();

  if (nodeNonTerminalNode) {
    var childNodes = node.getChildNodes();

    childNodes.forEach(function (childNode) {
      queryByClasses(childNode, Classes, nodes);
    });
  }

  return nodes;
}

module.exports = {
  asContent: asContent,
  replaceNodes: replaceNodes,
  queryByClass: queryByClass,
  queryByClasses: queryByClasses
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9fb2NjYW0tZG9tL3V0aWxpdGllcy5qcyJdLCJuYW1lcyI6WyJwYXJzZXJzIiwicmVxdWlyZSIsIm5lY2Vzc2FyeSIsIk5vblRlcm1pbmFsTm9kZSIsImFycmF5VXRpbGl0aWVzIiwicmVwbGFjZSIsImFzQ29udGVudCIsIm5vZGUiLCJ0b2tlbnMiLCJmaXJzdFNpZ25pZmljYW50VG9rZW4iLCJnZXRGaXJzdFNpZ25pZmljYW50VG9rZW4iLCJsYXN0U2lnbmlmaWNhbnRUb2tlbiIsImdldExhc3RTaWduaWZpY2FudFRva2VuIiwiZmlyc3RUb2tlbiIsImxhc3RUb2tlbiIsImZpcnN0VG9rZW5JbmRleCIsImluZGV4T2YiLCJsYXN0VG9rZW5JbmRleCIsImNvbnRlbnQiLCJpbmRleCIsInRva2VuIiwidG9rZW5Db250ZW50IiwiZ2V0Q29udGVudCIsInJlcGxhY2VOb2RlcyIsIm1hcHBpbmdzIiwicGFyZW50Tm9kZSIsIm5vZGVUZXJtaW5hbE5vZGUiLCJpc1Rlcm1pbmFsTm9kZSIsInJ1bGVOYW1lIiwiZ2V0UnVsZU5hbWUiLCJjaGlsZE5vZGVzIiwiZ2V0Q2hpbGROb2RlcyIsInJlcGxhY2VtZW50Tm9kZUNsYXNzIiwicmVwbGFjZWROb2RlIiwicmVwbGFjZW1lbnROb2RlIiwiZnJvbVJ1bGVOYW1lQW5kQ2hpbGROb2RlcyIsImNoaWxkTm9kZSIsImZvckVhY2giLCJxdWVyeUJ5Q2xhc3MiLCJDbGFzcyIsIm5vZGVzIiwicHVzaCIsIm5vZGVOb25UZXJtaW5hbE5vZGUiLCJpc05vblRlcm1pbmFsTm9kZSIsInF1ZXJ5QnlDbGFzc2VzIiwiQ2xhc3NlcyIsInNvbWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxVQUFVQyxRQUFRLGVBQVIsQ0FBaEI7QUFBQSxJQUEwQztBQUNwQ0MsWUFBWUQsUUFBUSxXQUFSLENBRGxCOztBQUdNLElBQUVFLGVBQUYsR0FBc0JILE9BQXRCLENBQUVHLGVBQUY7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SUFBeEIsRUFBOEJzQyxPQUE5QixFQUFtRDtBQUFBLE1BQVpMLEtBQVksdUVBQUosRUFBSTs7QUFDakRLLFVBQVFDLElBQVIsQ0FBYSxVQUFTUCxLQUFULEVBQWdCO0FBQzNCLFFBQUloQyxnQkFBZ0JnQyxLQUFwQixFQUEyQjtBQUN6QkMsWUFBTUMsSUFBTixDQUFXbEMsSUFBWDs7QUFFQSxhQUFPLElBQVA7QUFDRDtBQUNGLEdBTkQ7O0FBUUEsTUFBTW1DLHNCQUFzQm5DLEtBQUtvQyxpQkFBTCxFQUE1Qjs7QUFFQSxNQUFJRCxtQkFBSixFQUF5QjtBQUN2QixRQUFNWixhQUFhdkIsS0FBS3dCLGFBQUwsRUFBbkI7O0FBRUFELGVBQVdPLE9BQVgsQ0FBbUIsVUFBU0QsU0FBVCxFQUFvQjtBQUNyQ1EscUJBQWVSLFNBQWYsRUFBMEJTLE9BQTFCLEVBQW1DTCxLQUFuQztBQUNELEtBRkQ7QUFHRDs7QUFFRCxTQUFPQSxLQUFQO0FBQ0Q7O0FBRURPLE9BQU9DLE9BQVAsR0FBaUI7QUFDZjFDLHNCQURlO0FBRWZpQiw0QkFGZTtBQUdmZSw0QkFIZTtBQUlmTTtBQUplLENBQWpCIiwiZmlsZSI6InV0aWxpdGllcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcGFyc2VycyA9IHJlcXVpcmUoJ29jY2FtLXBhcnNlcnMnKSwgLy8vXG4gICAgICBuZWNlc3NhcnkgPSByZXF1aXJlKCduZWNlc3NhcnknKTtcblxuY29uc3QgeyBOb25UZXJtaW5hbE5vZGUgfSA9IHBhcnNlcnMsXG4gICAgICB7IGFycmF5VXRpbGl0aWVzIH0gPSBuZWNlc3NhcnksXG4gICAgICB7IHJlcGxhY2UgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBhc0NvbnRlbnQobm9kZSwgdG9rZW5zKSB7XG4gIGNvbnN0IGZpcnN0U2lnbmlmaWNhbnRUb2tlbiA9IG5vZGUuZ2V0Rmlyc3RTaWduaWZpY2FudFRva2VuKCksXG4gICAgICAgIGxhc3RTaWduaWZpY2FudFRva2VuID0gbm9kZS5nZXRMYXN0U2lnbmlmaWNhbnRUb2tlbigpLFxuICAgICAgICBmaXJzdFRva2VuID0gZmlyc3RTaWduaWZpY2FudFRva2VuLCAvLy9cbiAgICAgICAgbGFzdFRva2VuID0gbGFzdFNpZ25pZmljYW50VG9rZW4sIC8vL1xuICAgICAgICBmaXJzdFRva2VuSW5kZXggPSB0b2tlbnMuaW5kZXhPZihmaXJzdFRva2VuKSxcbiAgICAgICAgbGFzdFRva2VuSW5kZXggPSB0b2tlbnMuaW5kZXhPZihsYXN0VG9rZW4pO1xuXG4gIGxldCBjb250ZW50ID0gJyc7XG5cbiAgZm9yIChsZXQgaW5kZXggPSBmaXJzdFRva2VuSW5kZXg7IGluZGV4IDw9IGxhc3RUb2tlbkluZGV4OyBpbmRleCsrKSB7XG4gICAgY29uc3QgdG9rZW4gPSB0b2tlbnNbaW5kZXhdLFxuICAgICAgICAgIHRva2VuQ29udGVudCA9IHRva2VuLmdldENvbnRlbnQoKTtcblxuICAgIGNvbnRlbnQgKz0gdG9rZW5Db250ZW50O1xuICB9XG5cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VOb2Rlcyhub2RlLCBtYXBwaW5ncywgcGFyZW50Tm9kZSA9IG51bGwpIHtcbiAgY29uc3Qgbm9kZVRlcm1pbmFsTm9kZSA9IG5vZGUuaXNUZXJtaW5hbE5vZGUoKTtcblxuICBpZiAobm9kZVRlcm1pbmFsTm9kZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHJ1bGVOYW1lID0gbm9kZS5nZXRSdWxlTmFtZSgpLFxuICAgICAgICBjaGlsZE5vZGVzID0gbm9kZS5nZXRDaGlsZE5vZGVzKCksXG4gICAgICAgIHJlcGxhY2VtZW50Tm9kZUNsYXNzID0gbWFwcGluZ3NbcnVsZU5hbWVdIHx8IG51bGw7XG5cbiAgaWYgKHJlcGxhY2VtZW50Tm9kZUNsYXNzKSB7XG4gICAgY29uc3QgcmVwbGFjZWROb2RlID0gbm9kZSwgLy8vXG4gICAgICAgICAgcmVwbGFjZW1lbnROb2RlID0gTm9uVGVybWluYWxOb2RlLmZyb21SdWxlTmFtZUFuZENoaWxkTm9kZXMocmVwbGFjZW1lbnROb2RlQ2xhc3MsIHJ1bGVOYW1lLCBjaGlsZE5vZGVzKTtcblxuICAgIGlmIChwYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgICBub2RlID0gcmVwbGFjZW1lbnROb2RlOyAvLy9cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY2hpbGROb2RlcyA9IHBhcmVudE5vZGUuZ2V0Q2hpbGROb2RlcygpO1xuXG4gICAgICByZXBsYWNlKGNoaWxkTm9kZXMsIHJlcGxhY2VtZW50Tm9kZSwgZnVuY3Rpb24oY2hpbGROb2RlKSB7XG4gICAgICAgIGlmIChjaGlsZE5vZGUgPT09IHJlcGxhY2VkTm9kZSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwYXJlbnROb2RlID0gbm9kZTsgIC8vL1xuXG4gIGNoaWxkTm9kZXMuZm9yRWFjaChmdW5jdGlvbihjaGlsZE5vZGUpIHtcbiAgICBjb25zdCBub2RlID0gY2hpbGROb2RlOyAvLy9cblxuICAgIHJlcGxhY2VOb2Rlcyhub2RlLCBtYXBwaW5ncywgcGFyZW50Tm9kZSk7XG4gIH0pO1xuXG4gIHJldHVybiBub2RlO1xufVxuXG5mdW5jdGlvbiBxdWVyeUJ5Q2xhc3Mobm9kZSwgQ2xhc3MsIG5vZGVzID0gW10pIHtcbiAgaWYgKG5vZGUgaW5zdGFuY2VvZiBDbGFzcykge1xuICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gIH1cblxuICBjb25zdCBub2RlTm9uVGVybWluYWxOb2RlID0gbm9kZS5pc05vblRlcm1pbmFsTm9kZSgpO1xuXG4gIGlmIChub2RlTm9uVGVybWluYWxOb2RlKSB7XG4gICAgY29uc3QgY2hpbGROb2RlcyA9IG5vZGUuZ2V0Q2hpbGROb2RlcygpO1xuXG4gICAgY2hpbGROb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkTm9kZSkge1xuICAgICAgcXVlcnlCeUNsYXNzKGNoaWxkTm9kZSwgQ2xhc3MsIG5vZGVzKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBub2Rlcztcbn1cblxuZnVuY3Rpb24gcXVlcnlCeUNsYXNzZXMobm9kZSwgQ2xhc3Nlcywgbm9kZXMgPSBbXSkge1xuICBDbGFzc2VzLnNvbWUoZnVuY3Rpb24oQ2xhc3MpIHtcbiAgICBpZiAobm9kZSBpbnN0YW5jZW9mIENsYXNzKSB7XG4gICAgICBub2Rlcy5wdXNoKG5vZGUpO1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIGNvbnN0IG5vZGVOb25UZXJtaW5hbE5vZGUgPSBub2RlLmlzTm9uVGVybWluYWxOb2RlKCk7XG5cbiAgaWYgKG5vZGVOb25UZXJtaW5hbE5vZGUpIHtcbiAgICBjb25zdCBjaGlsZE5vZGVzID0gbm9kZS5nZXRDaGlsZE5vZGVzKCk7XG5cbiAgICBjaGlsZE5vZGVzLmZvckVhY2goZnVuY3Rpb24oY2hpbGROb2RlKSB7XG4gICAgICBxdWVyeUJ5Q2xhc3NlcyhjaGlsZE5vZGUsIENsYXNzZXMsIG5vZGVzKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBub2Rlcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFzQ29udGVudCxcbiAgcmVwbGFjZU5vZGVzLFxuICBxdWVyeUJ5Q2xhc3MsXG4gIHF1ZXJ5QnlDbGFzc2VzXG59O1xuIl19